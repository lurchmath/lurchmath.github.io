{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Lurch Project Lurch is a word processor designed to check the reasoning in proofs, specifically the types of proofs that students do in an introduction to proofs course. Its purpose is to give immediate and helpful feedback about whether a student is doing their proof correctly, so that the student learns the mechanics and rules of proof writing more quickly and thoroughly than if they had to wait days for manually graded feedback. Lurn more We have recently overhauled our documentation, and more updates are coming soon. Not all docs have been updated, but most have been. New bug fixes, new features, and new documentation arrive regularly. Tutorials How-To Guides References Status The latest version of Lurch is a web application that is in alpha testing at the moment. You can try it online here! A simple example proof in propositional logic is shown below. We tell Lurch which symbols our mathematical system requires like this: `Declare and, or, implies, not`. **Conjunction introduction:** `If A` and `if B` then we can conclude `A and B`. **Conjunction elimination:** `If A and B` then we can conclude `A` and separately conclude `B`. **Disjunction introduction:** `If A` then we can conclude `A or B`, conclude `B or A`, or even both. **Disjunction elimination:** (Version 1) `If A or B` and `not A` then it must be `B`. (Version 2) `If A or B` and `not B` then it must be `A`. **Conditional introduction:** To prove a conditional, we must construct a subproof of the following form. `Assume A`. Then, typically after some work, prove `B`. From that subproof, we can conclude `A implies B`. **Conditional elimination:** `If A implies B` and `if A`, then we can conclude `B`. **Negation introduction:** If we start a subproof with \"`assume A`\" and we end it with a contradiction, say `B` and `not B`, then we can end the subproof... ...and conclude `not A`. **Negation elimination:** If we start a subproof with \"`assume not A`\" and we end it with a contradiction, say `B` and `not B`, then we can end the subproof... ...and conclude `A`. **Contrapositive:** `If X implies Y` then `not Y implies not X`. `Assume X implies Y`. To establish the contrapositive, we must use a subproof. `Assume not Y`. The easiest way to show $\\neg X$ is with an inner subproof. `Assume X`. Then we can apply the original assumption to conclude `Y`, but we already know that `not Y` is true. That's a contradiction. So outside that inner subproof, we can conclude `not X`. Since we assumed $\\neg Y$ and proved $\\neg X$ from it, we can conclude `not Y implies not X`.","title":"Home"},{"location":"#the-lurch-project","text":"Lurch is a word processor designed to check the reasoning in proofs, specifically the types of proofs that students do in an introduction to proofs course. Its purpose is to give immediate and helpful feedback about whether a student is doing their proof correctly, so that the student learns the mechanics and rules of proof writing more quickly and thoroughly than if they had to wait days for manually graded feedback.","title":"The Lurch Project"},{"location":"#lurn-more","text":"We have recently overhauled our documentation, and more updates are coming soon. Not all docs have been updated, but most have been. New bug fixes, new features, and new documentation arrive regularly. Tutorials How-To Guides References","title":"Lurn more"},{"location":"#status","text":"The latest version of Lurch is a web application that is in alpha testing at the moment. You can try it online here! A simple example proof in propositional logic is shown below. We tell Lurch which symbols our mathematical system requires like this: `Declare and, or, implies, not`. **Conjunction introduction:** `If A` and `if B` then we can conclude `A and B`. **Conjunction elimination:** `If A and B` then we can conclude `A` and separately conclude `B`. **Disjunction introduction:** `If A` then we can conclude `A or B`, conclude `B or A`, or even both. **Disjunction elimination:** (Version 1) `If A or B` and `not A` then it must be `B`. (Version 2) `If A or B` and `not B` then it must be `A`. **Conditional introduction:** To prove a conditional, we must construct a subproof of the following form. `Assume A`. Then, typically after some work, prove `B`. From that subproof, we can conclude `A implies B`. **Conditional elimination:** `If A implies B` and `if A`, then we can conclude `B`. **Negation introduction:** If we start a subproof with \"`assume A`\" and we end it with a contradiction, say `B` and `not B`, then we can end the subproof... ...and conclude `not A`. **Negation elimination:** If we start a subproof with \"`assume not A`\" and we end it with a contradiction, say `B` and `not B`, then we can end the subproof... ...and conclude `A`. **Contrapositive:** `If X implies Y` then `not Y implies not X`. `Assume X implies Y`. To establish the contrapositive, we must use a subproof. `Assume not Y`. The easiest way to show $\\neg X$ is with an inner subproof. `Assume X`. Then we can apply the original assumption to conclude `Y`, but we already know that `not Y` is true. That's a contradiction. So outside that inner subproof, we can conclude `not X`. Since we assumed $\\neg Y$ and proved $\\neg X$ from it, we can conclude `not Y implies not X`.","title":"Status"},{"location":"about/","text":"About Lurch See the main page for a description of the software's purpose. Authors The Lurch project was created and has been principally designed and developed by Nathan Carter and Ken Monks , beginning informally in 1999 and continuing to the present. Major time was invested between 2008--2012 while supported by NSF DUE CCLI grant #0736644, and from 2018--present as part of a major update. Contributors The following students have also contributed work at various times over the years (and are now no longer students!). Jenna Bergevin Derek Breen Paul Christiano Ryan Colwell Timothy Delaney George Tillisch Jeffrey Wright","title":"About"},{"location":"about/#about-lurch","text":"See the main page for a description of the software's purpose.","title":"About Lurch"},{"location":"about/#authors","text":"The Lurch project was created and has been principally designed and developed by Nathan Carter and Ken Monks , beginning informally in 1999 and continuing to the present. Major time was invested between 2008--2012 while supported by NSF DUE CCLI grant #0736644, and from 2018--present as part of a major update.","title":"Authors"},{"location":"about/#contributors","text":"The following students have also contributed work at various times over the years (and are now no longer students!). Jenna Bergevin Derek Breen Paul Christiano Ryan Colwell Timothy Delaney George Tillisch Jeffrey Wright","title":"Contributors"},{"location":"how-to-create-a-lurch-site/","text":"How to create a Lurch Site See also What is a Lurch Site? Gallery of existing Lurch Sites To create your own Lurch site, follow the instructions below. Step 1. Fork an existing Lurch Site To find a site you want to fork, see our gallery . Once you have selected a site, visit its GitHub repository; you can find a link to that repository in the gallery. For example, the Developer Site's repository is at github.com/lurchmath/lurch . If you're new to the concept of \"forking\" on GitHub, see GitHub's forking instructions . You simply visit the repository you're forking, click the \"Fork\" menu on the top right, choose to create a new fork, and fill out a form like the following one. Once you have followed those instructions, you will have your own separate copy of the Lurch Site that you forked, but it will not yet be visible on the web. Step 2. Enable web access Until you do this, you cannot view your newly-created Lurch Site on the web. Here are the steps to enable web access for your Lurch Site: Visit the repository you just created in the previous step, probably named something like github.com/your-github-username/your-new-fork . Click the \"Settings\" tab near the top of the page. Click the Pages section from the left navigation bar. Ensure that the \"Source\" menu has \"Deploy from a branch\" selected. Ensure the \"Branch\" settings are for \"main\" and \"root.\" Click the Save button. It will take a few minutes for these changes to take effect. Then visit the website for your new fork, probably something like: http://your-github-username.github.io/your-new-fork/app Verify that your copy of the Lurch app is live. Optional Step 3. Change the default configuration You can do this step now, or later, or leave the configuration at its default. To change the configuration for your new site: View the README.md file in the config/ folder of your forked repository. It explains the various ways you can configure the app, and all the options available to you. Changing the configuration will require editing one or more files in the repository, which you can do in many ways. Here are a few options; select whichever of these options seems most convenient to you. (You need only one of these methods.) Recommended option: Find the file you want to change in the repository on GitHub and click the edit button (pencil icon) on the top right. See the screenshot below. Commit your changes when done. Press the period (\".\") key while viewing your repository to open an editor in the browser. Commit your changes when done. Open a GitHub Codespace from the \"Code\" menu on GitHub and work there. Commit your changes when done. Clone the repository to your computer and make changes there, then push them back to GitHub. Optional Step 4. Add mathematical documents You will almost surely want to add your own mathematical documents to your site at some point, but it is not necessary to do so immediately. The instructions below assume that you have already written some mathematical documents. Perhaps you did so using the Lurch app in your new site or another Lurch Site or perhaps you copied the files from elsewhere (with the author's permission, of course). Choose whichever of the following methods you prefer to upload your Lurch files into the math/ folder of your Lurch Site's repository. (You need to choose only one of these methods.) Recommended option: View the math/ folder in the repository, and click \"Add file\" in the top right, and choose \"Upload files.\" If you have the repository opened in a GitHub Codespace, you can drag the files into the editor's file browser (the left hand site). Commit your changes. If you cloned the repository to your computer, just add the files to your local copy, commit them, and push them to GitHub. You may wish to verify that the files you uploaded can accessed from your Lurch Site's copy of the Lurch app. You can do so in two different ways: Method 1: Using File > Open Visit the Lurch app in your Lurch Site. Click the File > Open menu item. In the dialog that appears, select \"From the web.\" Enter the URL to one of the files you uploaded, in the following form: http://your-github-username.github.io/your-new-fork/math/your-file-name.lurch Verify that it opens successfully in the Lurch app. Method 2: Using a direct link This method is useful because it allows you to create a single URL that opens a file you've written directly in the Lurch app in your Lurch Site. This can be useful for sharing with students, for example, to open a homework assignment in one click. Let's assume you have a file named homework-1.lurch in the math/ folder of your Lurch Site repository. Build a URL as follows, and visit it in your browser: http://your-github-username.github.io/your-new-fork/app/index.html?load=/math/homework-1.lurch Optional Step 5. Add/modify supporting web pages Right now, if users try to visit http://your-github-username.github.io/your-new-fork , they will get one of two results: If you forked a Lurch Site that had no landing page, the visitor will get a \"not found\" error. If you forked a Lurch Site that had a landing page, the visitor will see the landing page from the original Lurch Site that you forked. You may wish to create your own landing page, and possibly additional pages, perhaps with information about a course you're teaching, or a list of Lurch documents in your repository. We provide an Example Lurch Site that you may wish to imitate. (See link below.) Feel free to fill the root folder of your Lurch Site's repository with as many HTML files as you like. The one named index.html is the default landing page and can link to as many others as you wish to create. If you want any of those pages to link directly to one of the Lurch documents in your repository's math/ folder, opening it in your Lurch Site's copy of the Lurch app, use the method in the previous section for building a URL that does exactly that. You can also imitate the links you'll find in the landing page for the Example Lurch Site. View that landing page here View its source code here","title":"How to create a Lurch Site"},{"location":"how-to-create-a-lurch-site/#how-to-create-a-lurch-site","text":"","title":"How to create a Lurch Site"},{"location":"how-to-create-a-lurch-site/#see-also","text":"What is a Lurch Site? Gallery of existing Lurch Sites To create your own Lurch site, follow the instructions below.","title":"See also"},{"location":"how-to-create-a-lurch-site/#step-1-fork-an-existing-lurch-site","text":"To find a site you want to fork, see our gallery . Once you have selected a site, visit its GitHub repository; you can find a link to that repository in the gallery. For example, the Developer Site's repository is at github.com/lurchmath/lurch . If you're new to the concept of \"forking\" on GitHub, see GitHub's forking instructions . You simply visit the repository you're forking, click the \"Fork\" menu on the top right, choose to create a new fork, and fill out a form like the following one. Once you have followed those instructions, you will have your own separate copy of the Lurch Site that you forked, but it will not yet be visible on the web.","title":"Step 1. Fork an existing Lurch Site"},{"location":"how-to-create-a-lurch-site/#step-2-enable-web-access","text":"Until you do this, you cannot view your newly-created Lurch Site on the web. Here are the steps to enable web access for your Lurch Site: Visit the repository you just created in the previous step, probably named something like github.com/your-github-username/your-new-fork . Click the \"Settings\" tab near the top of the page. Click the Pages section from the left navigation bar. Ensure that the \"Source\" menu has \"Deploy from a branch\" selected. Ensure the \"Branch\" settings are for \"main\" and \"root.\" Click the Save button. It will take a few minutes for these changes to take effect. Then visit the website for your new fork, probably something like: http://your-github-username.github.io/your-new-fork/app Verify that your copy of the Lurch app is live.","title":"Step 2. Enable web access"},{"location":"how-to-create-a-lurch-site/#optional-step-3-change-the-default-configuration","text":"You can do this step now, or later, or leave the configuration at its default. To change the configuration for your new site: View the README.md file in the config/ folder of your forked repository. It explains the various ways you can configure the app, and all the options available to you. Changing the configuration will require editing one or more files in the repository, which you can do in many ways. Here are a few options; select whichever of these options seems most convenient to you. (You need only one of these methods.) Recommended option: Find the file you want to change in the repository on GitHub and click the edit button (pencil icon) on the top right. See the screenshot below. Commit your changes when done. Press the period (\".\") key while viewing your repository to open an editor in the browser. Commit your changes when done. Open a GitHub Codespace from the \"Code\" menu on GitHub and work there. Commit your changes when done. Clone the repository to your computer and make changes there, then push them back to GitHub.","title":"Optional Step 3. Change the default configuration"},{"location":"how-to-create-a-lurch-site/#optional-step-4-add-mathematical-documents","text":"You will almost surely want to add your own mathematical documents to your site at some point, but it is not necessary to do so immediately. The instructions below assume that you have already written some mathematical documents. Perhaps you did so using the Lurch app in your new site or another Lurch Site or perhaps you copied the files from elsewhere (with the author's permission, of course). Choose whichever of the following methods you prefer to upload your Lurch files into the math/ folder of your Lurch Site's repository. (You need to choose only one of these methods.) Recommended option: View the math/ folder in the repository, and click \"Add file\" in the top right, and choose \"Upload files.\" If you have the repository opened in a GitHub Codespace, you can drag the files into the editor's file browser (the left hand site). Commit your changes. If you cloned the repository to your computer, just add the files to your local copy, commit them, and push them to GitHub. You may wish to verify that the files you uploaded can accessed from your Lurch Site's copy of the Lurch app. You can do so in two different ways:","title":"Optional Step 4. Add mathematical documents"},{"location":"how-to-create-a-lurch-site/#method-1-using-file-open","text":"Visit the Lurch app in your Lurch Site. Click the File > Open menu item. In the dialog that appears, select \"From the web.\" Enter the URL to one of the files you uploaded, in the following form: http://your-github-username.github.io/your-new-fork/math/your-file-name.lurch Verify that it opens successfully in the Lurch app.","title":"Method 1: Using File &gt; Open"},{"location":"how-to-create-a-lurch-site/#method-2-using-a-direct-link","text":"This method is useful because it allows you to create a single URL that opens a file you've written directly in the Lurch app in your Lurch Site. This can be useful for sharing with students, for example, to open a homework assignment in one click. Let's assume you have a file named homework-1.lurch in the math/ folder of your Lurch Site repository. Build a URL as follows, and visit it in your browser: http://your-github-username.github.io/your-new-fork/app/index.html?load=/math/homework-1.lurch","title":"Method 2: Using a direct link"},{"location":"how-to-create-a-lurch-site/#optional-step-5-addmodify-supporting-web-pages","text":"Right now, if users try to visit http://your-github-username.github.io/your-new-fork , they will get one of two results: If you forked a Lurch Site that had no landing page, the visitor will get a \"not found\" error. If you forked a Lurch Site that had a landing page, the visitor will see the landing page from the original Lurch Site that you forked. You may wish to create your own landing page, and possibly additional pages, perhaps with information about a course you're teaching, or a list of Lurch documents in your repository. We provide an Example Lurch Site that you may wish to imitate. (See link below.) Feel free to fill the root folder of your Lurch Site's repository with as many HTML files as you like. The one named index.html is the default landing page and can link to as many others as you wish to create. If you want any of those pages to link directly to one of the Lurch documents in your repository's math/ folder, opening it in your Lurch Site's copy of the Lurch app, use the method in the previous section for building a URL that does exactly that. You can also imitate the links you'll find in the landing page for the Example Lurch Site. View that landing page here View its source code here","title":"Optional Step 5. Add/modify supporting web pages"},{"location":"how-to-toc/","text":"Lurch How-To Guides Warning We will eventually house several how-to guides here. The documentation for this project is actively being developed and expanded throughout 2024. How to Create a Lurch Site You may wish to start with the explanation of what a Lurch Site is , then proceed to the how-to guide, How to Create a Lurch Site . You may also be interested in the gallery of Lurch Sites .","title":"Lurch How-To Guides"},{"location":"how-to-toc/#lurch-how-to-guides","text":"Warning We will eventually house several how-to guides here. The documentation for this project is actively being developed and expanded throughout 2024.","title":"Lurch How-To Guides"},{"location":"how-to-toc/#how-to-create-a-lurch-site","text":"You may wish to start with the explanation of what a Lurch Site is , then proceed to the how-to guide, How to Create a Lurch Site . You may also be interested in the gallery of Lurch Sites .","title":"How to Create a Lurch Site"},{"location":"lurch-notation/","text":"Lurch notation reference Warning: The notation below is not intended for everyone Our eventual plan for Lurch is that every instructor can choose the syntax and notation that makes the most sense for their students. (Furthermore, instructors who want students to use an equation editor only can already do that.) Consequently, the notation documented below is NOT the permanent notation that our application will always use. In fact, right now, it's customized particularly to the needs of the one and only instructor testing Lurch in an actual course! Warning: The notation below will probably change often While it was inspired by AsciiMath , and we will try to stay consistent with that standard when possible, some of the unique notation below may change over time, in response to in-class testing, new needs, and feedback from students and potential new adopters. Warning: The notation below is not fully documented Not every symbol or expression below has a self-evident meaning. Our documentation for this project has just begun, and we aim to make it more comprehensive with time. The reader will also note that many meanings have more than one way to type them. Especially when a Lurch notation expression uses unicode characters, there is typically a plain-text alternative, to make it easier to type. Logic Lurch notation Meaning P and Q \\(P\\text{ and }Q\\) P\u2227Q \\(P\\text{ and }Q\\) P or Q \\(P\\text{ or }Q\\) P\u2228Q \\(P\\text{ or }Q\\) not P \\(\\neg P\\) \u00acP \\(\\neg P\\) P implies Q \\(P\\Rightarrow Q\\) P\u21d2Q \\(P\\Rightarrow Q\\) P iff Q \\(P\\Leftrightarrow Q\\) P\u21d4Q \\(P\\Leftrightarrow Q\\) contradiction \\(\\rightarrow\\leftarrow\\) \u2192\u2190 \\(\\rightarrow\\leftarrow\\) Quantifiers and bindings Lurch notation Meaning forall x.x<x+1 \\(\\forall x, x<x+1\\) for all x.x<x+1 \\(\\forall x, x<x+1\\) \u2200x.x<x+1 \\(\\forall x, x<x+1\\) exists x.x=2 cdot x \\(\\exists x, x=2x\\) \u2203x.x=2\u22c5x \\(\\exists x, x=2x\\) exists unique x.x=2 cdot x \\(\\exists ! x, x=2x\\) \u2203!x.x=2\u22c5x \\(\\exists ! x, x=2x\\) x.x+2 \\(x, x+1\\) x\u21a6x+2 \\(x, x+1\\) Algebraic expressions Lurch notation Meaning (x) \\(\\left(x\\right)\\) x+y \\(x+y\\) 2+x+y \\(2+x+y\\) -x \\(-x\\) 1-x \\(1-x\\) x*y \\(x y\\) x cdot y \\(x y\\) x\u22c5y \\(x y\\) 2*x*y \\(2 x y\\) 2 cdot x cdot y \\(2 x y\\) 2\u22c5x\u22c5y \\(2 x y\\) 2*3*x \\(2\\cdot 3 x\\) 2 cdot 3 cdot x \\(2\\cdot 3 x\\) 2\u22c53\u22c5x \\(2\\cdot 3 x\\) 1/x \\(\\frac{1}{x}\\) 2*1/x*y \\(2\\frac{1}{x}y\\) (2*1)/(x*y) \\(\\frac{(2\\cdot 1)}{(xy)}\\) x^2 \\(x^2\\) x factorial \\(x!\\) x\uff01 \\(x!\\) Set Theory Lurch notation Meaning x in A \\(x\\in A\\) x\u2208A \\(x\\in A\\) x notin A \\(x\\notin A\\) x\u2209A \\(x\\notin A\\) A subset B \\(A\\subseteq B\\) A subseteq B \\(A\\subseteq B\\) A\u2286B \\(A\\subseteq B\\) A cup B \\(A\\cup B\\) A union B \\(A\\cup B\\) A\u222aB \\(A\\cup B\\) A cap B \\(A\\cap B\\) A intersect B \\(A\\cap B\\) A\u2229B \\(A\\cap B\\) A setminus B \\(A\\setminus B\\) A\u2216B \\(A\\setminus B\\) A complement \\(A^\\circ\\) A\u00b0 \\(A^\\circ\\) f:A\u2192B \\(f\\colon A\\to B\\) f(x) \\(f\\left(x\\right)\\) g circ f \\(g\\circ f\\) g\u2218f \\(g\\circ f\\) A times B \\(A\\times B\\) A\u00d7B \\(A\\times B\\) \u27e8x,y\u27e9 \\(\\langle x,y \\rangle\\) Relations Lurch notation Meaning x < 0 \\(x<0\\) x lt 0 \\(x<0\\) x leq 0 \\(x\\leq 0\\) x \u2264 0 \\(x\\leq 0\\) x neq 0 \\(x\\neq 0\\) x ne 0 \\(x\\neq 0\\) x\u22600 \\(x\\neq 0\\) m | n \\(m\\mid n\\) m divides n \\(m\\mid n\\) a\u2248b mod m \\(a\\underset{m}{\\equiv}b\\) x~y \\(x\\sim y\\) x~y~z \\(x\\sim y\\sim z\\) x=y \\(x=y\\) x=y=z \\(x=y=z\\) X loves Y \\(X\\text{ loves }Y\\) X is Y \\(X\\text{ is }Y\\) X is an Y \\(X\\text{ is }Y\\) X is a Y \\(X\\text{ is }Y\\) P is a partition of A \\(P\\text{ is a partition of }A\\) '~' is an equivalence relation \\(\\sim\\text{ is equivalence relation}\\) [a] \\(\\left[a\\right]\\) [a,~] \\(\\left[a\\right]_{\\sim}\\) '~' is a strict partial order \\(\\sim\\text{ is strict partial order}\\) '~' is a partial order \\(\\sim\\text{ is partial order}\\) '~' is a total order \\(\\sim\\text{ is total order}\\) Assumptions and Declarations (case insensitive) Lurch notation Meaning Assume P \\(\\text{Assume }P\\) Given P \\(\\text{Assume }P\\) Suppose P \\(\\text{Assume }P\\) If P \\(\\text{Assume }P\\) :P \\(\\text{Assume }P\\) Let x \\(\\text{Let }x\\) Let x be such that x in \u211d \\(\\text{Let }x\\text{ be such that }x\\in\\mathbb{R}\\) Let x such that x in \u211d \\(\\text{Let }x\\text{ be such that }x\\in\\mathbb{R}\\) f(c)=0 for some c \\(f(c)=0\\text{ for some }c\\) Declare is 0 + cos \\(\\text{Declare is, 0, +, and cos}\\) Miscellaneous Lurch notation Meaning f\u207b(x) \\(f^-\\left(x\\right)\\) f recip(x) \\(f^-\\left(x\\right)\\) f inv(x) \\(f^-\\left(x\\right)\\) x recip \\(x^-\\) x inv \\(x^-\\) x\u207b \\(x^-\\) \u03bbP(k) \\(\\lambda{P}(k)\\)","title":"Lurch notation reference"},{"location":"lurch-notation/#lurch-notation-reference","text":"Warning: The notation below is not intended for everyone Our eventual plan for Lurch is that every instructor can choose the syntax and notation that makes the most sense for their students. (Furthermore, instructors who want students to use an equation editor only can already do that.) Consequently, the notation documented below is NOT the permanent notation that our application will always use. In fact, right now, it's customized particularly to the needs of the one and only instructor testing Lurch in an actual course! Warning: The notation below will probably change often While it was inspired by AsciiMath , and we will try to stay consistent with that standard when possible, some of the unique notation below may change over time, in response to in-class testing, new needs, and feedback from students and potential new adopters. Warning: The notation below is not fully documented Not every symbol or expression below has a self-evident meaning. Our documentation for this project has just begun, and we aim to make it more comprehensive with time. The reader will also note that many meanings have more than one way to type them. Especially when a Lurch notation expression uses unicode characters, there is typically a plain-text alternative, to make it easier to type.","title":"Lurch notation reference"},{"location":"lurch-notation/#logic","text":"Lurch notation Meaning P and Q \\(P\\text{ and }Q\\) P\u2227Q \\(P\\text{ and }Q\\) P or Q \\(P\\text{ or }Q\\) P\u2228Q \\(P\\text{ or }Q\\) not P \\(\\neg P\\) \u00acP \\(\\neg P\\) P implies Q \\(P\\Rightarrow Q\\) P\u21d2Q \\(P\\Rightarrow Q\\) P iff Q \\(P\\Leftrightarrow Q\\) P\u21d4Q \\(P\\Leftrightarrow Q\\) contradiction \\(\\rightarrow\\leftarrow\\) \u2192\u2190 \\(\\rightarrow\\leftarrow\\)","title":"Logic"},{"location":"lurch-notation/#quantifiers-and-bindings","text":"Lurch notation Meaning forall x.x<x+1 \\(\\forall x, x<x+1\\) for all x.x<x+1 \\(\\forall x, x<x+1\\) \u2200x.x<x+1 \\(\\forall x, x<x+1\\) exists x.x=2 cdot x \\(\\exists x, x=2x\\) \u2203x.x=2\u22c5x \\(\\exists x, x=2x\\) exists unique x.x=2 cdot x \\(\\exists ! x, x=2x\\) \u2203!x.x=2\u22c5x \\(\\exists ! x, x=2x\\) x.x+2 \\(x, x+1\\) x\u21a6x+2 \\(x, x+1\\)","title":"Quantifiers and bindings"},{"location":"lurch-notation/#algebraic-expressions","text":"Lurch notation Meaning (x) \\(\\left(x\\right)\\) x+y \\(x+y\\) 2+x+y \\(2+x+y\\) -x \\(-x\\) 1-x \\(1-x\\) x*y \\(x y\\) x cdot y \\(x y\\) x\u22c5y \\(x y\\) 2*x*y \\(2 x y\\) 2 cdot x cdot y \\(2 x y\\) 2\u22c5x\u22c5y \\(2 x y\\) 2*3*x \\(2\\cdot 3 x\\) 2 cdot 3 cdot x \\(2\\cdot 3 x\\) 2\u22c53\u22c5x \\(2\\cdot 3 x\\) 1/x \\(\\frac{1}{x}\\) 2*1/x*y \\(2\\frac{1}{x}y\\) (2*1)/(x*y) \\(\\frac{(2\\cdot 1)}{(xy)}\\) x^2 \\(x^2\\) x factorial \\(x!\\) x\uff01 \\(x!\\)","title":"Algebraic expressions"},{"location":"lurch-notation/#set-theory","text":"Lurch notation Meaning x in A \\(x\\in A\\) x\u2208A \\(x\\in A\\) x notin A \\(x\\notin A\\) x\u2209A \\(x\\notin A\\) A subset B \\(A\\subseteq B\\) A subseteq B \\(A\\subseteq B\\) A\u2286B \\(A\\subseteq B\\) A cup B \\(A\\cup B\\) A union B \\(A\\cup B\\) A\u222aB \\(A\\cup B\\) A cap B \\(A\\cap B\\) A intersect B \\(A\\cap B\\) A\u2229B \\(A\\cap B\\) A setminus B \\(A\\setminus B\\) A\u2216B \\(A\\setminus B\\) A complement \\(A^\\circ\\) A\u00b0 \\(A^\\circ\\) f:A\u2192B \\(f\\colon A\\to B\\) f(x) \\(f\\left(x\\right)\\) g circ f \\(g\\circ f\\) g\u2218f \\(g\\circ f\\) A times B \\(A\\times B\\) A\u00d7B \\(A\\times B\\) \u27e8x,y\u27e9 \\(\\langle x,y \\rangle\\)","title":"Set Theory"},{"location":"lurch-notation/#relations","text":"Lurch notation Meaning x < 0 \\(x<0\\) x lt 0 \\(x<0\\) x leq 0 \\(x\\leq 0\\) x \u2264 0 \\(x\\leq 0\\) x neq 0 \\(x\\neq 0\\) x ne 0 \\(x\\neq 0\\) x\u22600 \\(x\\neq 0\\) m | n \\(m\\mid n\\) m divides n \\(m\\mid n\\) a\u2248b mod m \\(a\\underset{m}{\\equiv}b\\) x~y \\(x\\sim y\\) x~y~z \\(x\\sim y\\sim z\\) x=y \\(x=y\\) x=y=z \\(x=y=z\\) X loves Y \\(X\\text{ loves }Y\\) X is Y \\(X\\text{ is }Y\\) X is an Y \\(X\\text{ is }Y\\) X is a Y \\(X\\text{ is }Y\\) P is a partition of A \\(P\\text{ is a partition of }A\\) '~' is an equivalence relation \\(\\sim\\text{ is equivalence relation}\\) [a] \\(\\left[a\\right]\\) [a,~] \\(\\left[a\\right]_{\\sim}\\) '~' is a strict partial order \\(\\sim\\text{ is strict partial order}\\) '~' is a partial order \\(\\sim\\text{ is partial order}\\) '~' is a total order \\(\\sim\\text{ is total order}\\)","title":"Relations"},{"location":"lurch-notation/#assumptions-and-declarations-case-insensitive","text":"Lurch notation Meaning Assume P \\(\\text{Assume }P\\) Given P \\(\\text{Assume }P\\) Suppose P \\(\\text{Assume }P\\) If P \\(\\text{Assume }P\\) :P \\(\\text{Assume }P\\) Let x \\(\\text{Let }x\\) Let x be such that x in \u211d \\(\\text{Let }x\\text{ be such that }x\\in\\mathbb{R}\\) Let x such that x in \u211d \\(\\text{Let }x\\text{ be such that }x\\in\\mathbb{R}\\) f(c)=0 for some c \\(f(c)=0\\text{ for some }c\\) Declare is 0 + cos \\(\\text{Declare is, 0, +, and cos}\\)","title":"Assumptions and Declarations (case insensitive)"},{"location":"lurch-notation/#miscellaneous","text":"Lurch notation Meaning f\u207b(x) \\(f^-\\left(x\\right)\\) f recip(x) \\(f^-\\left(x\\right)\\) f inv(x) \\(f^-\\left(x\\right)\\) x recip \\(x^-\\) x inv \\(x^-\\) x\u207b \\(x^-\\) \u03bbP(k) \\(\\lambda{P}(k)\\)","title":"Miscellaneous"},{"location":"lurch-sites-gallery/","text":"Gallery of Lurch Sites This is a gallery of all the Lurch Sites that have been created by the Lurch developers and community. Since the project has just begun, the gallery is still small, but growing. See also What is a Lurch Site? How to create a Lurch Site The Gallery Lurch Site for Developers Open app Open repo The development repository doubles as a Lurch Site with no contents. Fork this site only if you want to start with a completely blank canvas, and you want all developer tools installed so that you could modify the software itself and submit pull requests back to the developers. Example Lurch Site Open app Open repo Open homepage This site serves as an example of how you can create your own Lurch Sites. As you read the documentation for how to make a Lurch Site , you can compare what you read there to this example. Its homepage shows how to customize some of its contents to suit your needs. More coming soon!","title":"Gallery of Lurch Sites"},{"location":"lurch-sites-gallery/#gallery-of-lurch-sites","text":"This is a gallery of all the Lurch Sites that have been created by the Lurch developers and community. Since the project has just begun, the gallery is still small, but growing.","title":"Gallery of Lurch Sites"},{"location":"lurch-sites-gallery/#see-also","text":"What is a Lurch Site? How to create a Lurch Site","title":"See also"},{"location":"lurch-sites-gallery/#the-gallery","text":"Lurch Site for Developers Open app Open repo The development repository doubles as a Lurch Site with no contents. Fork this site only if you want to start with a completely blank canvas, and you want all developer tools installed so that you could modify the software itself and submit pull requests back to the developers. Example Lurch Site Open app Open repo Open homepage This site serves as an example of how you can create your own Lurch Sites. As you read the documentation for how to make a Lurch Site , you can compare what you read there to this example. Its homepage shows how to customize some of its contents to suit your needs. More coming soon!","title":"The Gallery"},{"location":"old-versions/","text":"Old versions of Lurch Lurch was first conceived in about 1995, but work was only sporadic and informal for most of the time since then. From 2008--2012, an intense period of work was supported by NSF DUE CCLI grant #0736644, followed by a break for redesign, and then reinvigorated work from about 2019 onward, resulting in the latest version . This page is for historical purposes only, and lists old versions of the software no longer used or suppored. Again, we encourage users seeking the current version to visit our main page . They are listed in chronological order. Desktop application, 2008--2014 Work on this project was supported by NSF DUE CCLI grant #0736644 from 2008-2012, resulting in a desktop application for Windows, Mac, and Linux systems. That desktop app has several drawbacks that motivated our work on the latest version , most notably very slow computation and a less than reliable user interface. Again, it's mentioned here for historical purposes only; we recommend using the newest version. Home page for Lurch desktop app from 2008--2014 Lurch Web Platform, c2017 Our first attempt to move our desktop application to the web resulted in a suite of tools for web-based word processing with semantic features embedded in the document and feedback graphics overlaid on top of the document. Subsequent improvements in web-based word processors (particularly TinyMCE) and our own decisions to streamline our design made it so that we did not end up using most of these tools in the long run. We mention them here for archival purposes only. First attempt at moving Lurch to the web , no longer actively developed or supported, including small example apps that use that web platform, documented here . A partial implementaton of the OpenMath standard in JavaScript cloud-storage - A JavaScript interface to cloud storage providers, used in our app for saving Lurch documents to Dropbox loadsave-plugin - A TinyMCE plugin providing a UI and other tools for loading and saving documents written in the editor","title":"Old versions of Lurch"},{"location":"old-versions/#old-versions-of-lurch","text":"Lurch was first conceived in about 1995, but work was only sporadic and informal for most of the time since then. From 2008--2012, an intense period of work was supported by NSF DUE CCLI grant #0736644, followed by a break for redesign, and then reinvigorated work from about 2019 onward, resulting in the latest version . This page is for historical purposes only, and lists old versions of the software no longer used or suppored. Again, we encourage users seeking the current version to visit our main page . They are listed in chronological order.","title":"Old versions of Lurch"},{"location":"old-versions/#desktop-application-2008-2014","text":"Work on this project was supported by NSF DUE CCLI grant #0736644 from 2008-2012, resulting in a desktop application for Windows, Mac, and Linux systems. That desktop app has several drawbacks that motivated our work on the latest version , most notably very slow computation and a less than reliable user interface. Again, it's mentioned here for historical purposes only; we recommend using the newest version. Home page for Lurch desktop app from 2008--2014","title":"Desktop application, 2008--2014"},{"location":"old-versions/#lurch-web-platform-c2017","text":"Our first attempt to move our desktop application to the web resulted in a suite of tools for web-based word processing with semantic features embedded in the document and feedback graphics overlaid on top of the document. Subsequent improvements in web-based word processors (particularly TinyMCE) and our own decisions to streamline our design made it so that we did not end up using most of these tools in the long run. We mention them here for archival purposes only. First attempt at moving Lurch to the web , no longer actively developed or supported, including small example apps that use that web platform, documented here . A partial implementaton of the OpenMath standard in JavaScript cloud-storage - A JavaScript interface to cloud storage providers, used in our app for saving Lurch documents to Dropbox loadsave-plugin - A TinyMCE plugin providing a UI and other tools for loading and saving documents written in the editor","title":"Lurch Web Platform, c2017"},{"location":"reference-toc/","text":"Lurch Reference Documentation Warning The documentation for this project is actively being developed and expanded throughout 2024. Lurch Sites Gallery of Lurch Sites GitHub Repository for the Lurch codebase Repository for this website List of all Lurch repositories API Documentation Source code documentation for the core classes Source code documentation for the validation algorithm Source code documentation for the user interface Archive Old versions of our work are archived here .","title":"Lurch Reference Documentation"},{"location":"reference-toc/#lurch-reference-documentation","text":"Warning The documentation for this project is actively being developed and expanded throughout 2024.","title":"Lurch Reference Documentation"},{"location":"reference-toc/#lurch-sites","text":"Gallery of Lurch Sites","title":"Lurch Sites"},{"location":"reference-toc/#github","text":"Repository for the Lurch codebase Repository for this website List of all Lurch repositories","title":"GitHub"},{"location":"reference-toc/#api-documentation","text":"Source code documentation for the core classes Source code documentation for the validation algorithm Source code documentation for the user interface","title":"API Documentation"},{"location":"reference-toc/#archive","text":"Old versions of our work are archived here .","title":"Archive"},{"location":"tut-01-word-processor/","text":"Lurch is a word processor It is also much more, but it is a word processor. While its main goal is to be able to check the reasoning in students' mathematical arguments, its foundation is a word processor. A copy of the Lurch application is embedded below. You can see that it has all of the basic word processing functionality, including headings, fonts, and so on. Under the hood Lurch is built on the pre-existing, open-source project TinyMCE , which is used in literally millions of other web-based projects. It is a mature product that is easy to extend with new functionality, which enables us to build Lurch with TinyMCE as the foundation. How do I add some math? See the next page in the tutorial!","title":"Lurch is a word processor"},{"location":"tut-01-word-processor/#lurch-is-a-word-processor","text":"","title":"Lurch is a word processor"},{"location":"tut-01-word-processor/#it-is-also-much-more-but-it-is-a-word-processor","text":"While its main goal is to be able to check the reasoning in students' mathematical arguments, its foundation is a word processor. A copy of the Lurch application is embedded below. You can see that it has all of the basic word processing functionality, including headings, fonts, and so on.","title":"It is also much more, but it is a word processor."},{"location":"tut-01-word-processor/#under-the-hood","text":"Lurch is built on the pre-existing, open-source project TinyMCE , which is used in literally millions of other web-based projects. It is a mature product that is easy to extend with new functionality, which enables us to build Lurch with TinyMCE as the foundation.","title":"Under the hood"},{"location":"tut-01-word-processor/#how-do-i-add-some-math","text":"See the next page in the tutorial!","title":"How do I add some math?"},{"location":"tut-02-expository-math/","text":"Adding mathematical content The simplest way to enter mathematical content into Lurch is to use an equation editor (powered by MathLive ). For users who are familiar with LaTeX, we have that option as well, but let's start with the simpler method. Exercise: Add some math In the Lurch application below, click the Insert menu and choose \"Expository math.\" In the dialog that pops up, enter some math using the equation editor. For example, you might type 1-x^2 and watch it become \\(1-x^2\\) . (If you want a math keyboard, open one by clicking the keyboard icon in the equation editor.) Click OK to place your math into the document. Editing math you've added To later edit your new mathematical expression, you can either click the expression or move your cursor over the expression with the arrow keys on the keyboard (which will highlight the expression) and then press Enter on the keyboard. Both options open the same dialog box you had when adding the math, but now for editing it instead. For power users Users familiar with LaTeX may want to use that notation instead of an equation editor. (Other users can skip this section.) We have a setting that lets you choose the type of interface you would like. Beginner mode is the equation editor you saw in the exercise above. Intermediate mode shows a LaTeX input box and the equation editor, and you can use either one, and they stay in sync. Advanced mode shows only the LaTeX input box and a typeset preview, with minimal styling. The syncing of LaTeX and the equation editor in intermediate mode is useful in two ways. For those who type LaTeX, it's nice to see a live preview, to be sure that you have typed what you intended. For those who use the equation editor, it provides a simple way to learn the corresponding LaTeX syntax, if the user wants to do so. Exercise: Change the input mode In the Lurch application above, click the Edit menu and choose the Preferences item (at the very bottom, which may require you to scroll). Find the setting for \"Type of expository math editor to use\" and change it to \"Intermediate.\" Click OK to save your settings. Repeat the exercise above to try out the new intermediate-mode editor for expository math content. Try this exercise again, but use Advanced mode, then switch the setting to the one you like best. Is Lurch grading my math? Not yet! We're just getting started. Let's learn how to input meaningful math.","title":"Adding mathematical content"},{"location":"tut-02-expository-math/#adding-mathematical-content","text":"The simplest way to enter mathematical content into Lurch is to use an equation editor (powered by MathLive ). For users who are familiar with LaTeX, we have that option as well, but let's start with the simpler method. Exercise: Add some math In the Lurch application below, click the Insert menu and choose \"Expository math.\" In the dialog that pops up, enter some math using the equation editor. For example, you might type 1-x^2 and watch it become \\(1-x^2\\) . (If you want a math keyboard, open one by clicking the keyboard icon in the equation editor.) Click OK to place your math into the document.","title":"Adding mathematical content"},{"location":"tut-02-expository-math/#editing-math-youve-added","text":"To later edit your new mathematical expression, you can either click the expression or move your cursor over the expression with the arrow keys on the keyboard (which will highlight the expression) and then press Enter on the keyboard. Both options open the same dialog box you had when adding the math, but now for editing it instead.","title":"Editing math you've added"},{"location":"tut-02-expository-math/#for-power-users","text":"Users familiar with LaTeX may want to use that notation instead of an equation editor. (Other users can skip this section.) We have a setting that lets you choose the type of interface you would like. Beginner mode is the equation editor you saw in the exercise above. Intermediate mode shows a LaTeX input box and the equation editor, and you can use either one, and they stay in sync. Advanced mode shows only the LaTeX input box and a typeset preview, with minimal styling. The syncing of LaTeX and the equation editor in intermediate mode is useful in two ways. For those who type LaTeX, it's nice to see a live preview, to be sure that you have typed what you intended. For those who use the equation editor, it provides a simple way to learn the corresponding LaTeX syntax, if the user wants to do so. Exercise: Change the input mode In the Lurch application above, click the Edit menu and choose the Preferences item (at the very bottom, which may require you to scroll). Find the setting for \"Type of expository math editor to use\" and change it to \"Intermediate.\" Click OK to save your settings. Repeat the exercise above to try out the new intermediate-mode editor for expository math content. Try this exercise again, but use Advanced mode, then switch the setting to the one you like best.","title":"For power users"},{"location":"tut-02-expository-math/#is-lurch-grading-my-math","text":"Not yet! We're just getting started. Let's learn how to input meaningful math.","title":"Is Lurch grading my math?"},{"location":"tut-03-meaningful-math/","text":"Meaningful mathematics Two types of mathematical content Lurch allows users to type math in two ways: meaningful math, which the user wants Lurch to read and grade, giving feedback about its correctness; and expository math, which the user wrote to give some intuition for a human reader of their work, but which Lurch should ignore. In the previous tutorial page, we entered only expository math, not meaningful math. If we asked Lurch to check our work, it would give us no feedback at all, because it knows to ignore content we've explicitly called \"expository.\" Why two types of math? Students will almost always want to use meaningful math only, so that Lurch will read and grade all of their work. But instructors may want to enter a mix of meaningful and expository math. For example, if an instructor is defining a new set of axioms, and they want to intersperse examples that explain the axioms, they don't want Lurch to misinterpret the examples as axioms, or as student work to be graded. (The instructor might even give examples of what you can't do with the axioms!) So they would use meaningful math for the axioms, but expository math for the examples. Exercise: Meaningful math In the Lurch application below, click the Insert menu and choose \"Expression.\" In the dialog that pops up, type a simple expression, like \\(x<0\\) . Click OK to place your math into the document. To edit your new content, you have the same options as you did for expository math ; you can click it or place your cursor on it and hit enter. Important: Recognizing meaningful content You have surely noticed that the expression you just added is surrounded in a blue-ish border. This border distinguishes meaningful content from non-meaningful content, and makes it clear which portions of your document Lurch is paying attention to. We'll talk more about this decoration (and how to hide it when you don't want to see it) in later parts of this tutorial. For power users Just as expository math expressions can be entered using an equation editor or LaTeX notation, meaningful mathematics can also be entered in more than one way. (Again, users happy with the equation editor can skip this section.) Exercise: Change the input mode In the Lurch application above, click the Edit menu and choose the Preferences item (at the very bottom, which may require you to scroll). Find the setting for \"Type of expression editor to use\" and change it to \"Intermediate.\" Click OK to save your settings. Much like intermediate mode for editing expository math content allows you to use the equation editor or LaTeX notation, the intermediate mode for editing meaningful math expressions allows you to use the equation editor or a custom Lurch notation for meaningful expressions. Warning: This is not LaTeX LaTeX was designed for presentation, not meaning. The notation used for meaningful expressions in Lurch is not LaTeX, but a derivative of AsciiMath specific to the Lurch project. We hope to make this notation customizable in a future version of Lurch, but in this early phase of the project it is not. You can read more about the Lurch notation here. Or you can choose to use the equation editor instead. Like with expository math, meaningful math has three editor modes, and you can choose the one you like best: Beginner mode is the default mode and uses just an equation editor widget. Intermediate mode incorporates both the equation editor for those who wish to use it and a text box that uses Lurch notation . Advanced mode is for those who have mastered Lurch notation, and shows a very minimalist dialog that aims to let you stay in the flow of your work. Is lurch grading my math now? No, but that's the very next thing! Learn how to have Lurch grade your document.","title":"Meaningful mathematics"},{"location":"tut-03-meaningful-math/#meaningful-mathematics","text":"","title":"Meaningful mathematics"},{"location":"tut-03-meaningful-math/#two-types-of-mathematical-content","text":"Lurch allows users to type math in two ways: meaningful math, which the user wants Lurch to read and grade, giving feedback about its correctness; and expository math, which the user wrote to give some intuition for a human reader of their work, but which Lurch should ignore. In the previous tutorial page, we entered only expository math, not meaningful math. If we asked Lurch to check our work, it would give us no feedback at all, because it knows to ignore content we've explicitly called \"expository.\"","title":"Two types of mathematical content"},{"location":"tut-03-meaningful-math/#why-two-types-of-math","text":"Students will almost always want to use meaningful math only, so that Lurch will read and grade all of their work. But instructors may want to enter a mix of meaningful and expository math. For example, if an instructor is defining a new set of axioms, and they want to intersperse examples that explain the axioms, they don't want Lurch to misinterpret the examples as axioms, or as student work to be graded. (The instructor might even give examples of what you can't do with the axioms!) So they would use meaningful math for the axioms, but expository math for the examples. Exercise: Meaningful math In the Lurch application below, click the Insert menu and choose \"Expression.\" In the dialog that pops up, type a simple expression, like \\(x<0\\) . Click OK to place your math into the document. To edit your new content, you have the same options as you did for expository math ; you can click it or place your cursor on it and hit enter. Important: Recognizing meaningful content You have surely noticed that the expression you just added is surrounded in a blue-ish border. This border distinguishes meaningful content from non-meaningful content, and makes it clear which portions of your document Lurch is paying attention to. We'll talk more about this decoration (and how to hide it when you don't want to see it) in later parts of this tutorial.","title":"Why two types of math?"},{"location":"tut-03-meaningful-math/#for-power-users","text":"Just as expository math expressions can be entered using an equation editor or LaTeX notation, meaningful mathematics can also be entered in more than one way. (Again, users happy with the equation editor can skip this section.) Exercise: Change the input mode In the Lurch application above, click the Edit menu and choose the Preferences item (at the very bottom, which may require you to scroll). Find the setting for \"Type of expression editor to use\" and change it to \"Intermediate.\" Click OK to save your settings. Much like intermediate mode for editing expository math content allows you to use the equation editor or LaTeX notation, the intermediate mode for editing meaningful math expressions allows you to use the equation editor or a custom Lurch notation for meaningful expressions. Warning: This is not LaTeX LaTeX was designed for presentation, not meaning. The notation used for meaningful expressions in Lurch is not LaTeX, but a derivative of AsciiMath specific to the Lurch project. We hope to make this notation customizable in a future version of Lurch, but in this early phase of the project it is not. You can read more about the Lurch notation here. Or you can choose to use the equation editor instead. Like with expository math, meaningful math has three editor modes, and you can choose the one you like best: Beginner mode is the default mode and uses just an equation editor widget. Intermediate mode incorporates both the equation editor for those who wish to use it and a text box that uses Lurch notation . Advanced mode is for those who have mastered Lurch notation, and shows a very minimalist dialog that aims to let you stay in the flow of your work.","title":"For power users"},{"location":"tut-03-meaningful-math/#is-lurch-grading-my-math-now","text":"No, but that's the very next thing! Learn how to have Lurch grade your document.","title":"Is lurch grading my math now?"},{"location":"tut-04-validation/","text":"Checking your reasoning Let's state the obvious. First, we `assume x < 0`. Then we can surely conclude (drum roll) that `x < 0`! Passing your first quiz The document above contains two meaningful mathematical expressions. You know that they are meaningful (not just expository) because of the blue borders. But Lurch has not yet given any indication of whether the (very simple!) reasoning in the above document is correct. Let's make that happen. Exercise: Ask for a grade In the document shown above, click the Document menu and choose \"Check my reasoning.\" You should find that the second meaningful mathematics gets a green check mark from Lurch, your virtual grader. Hover your mouse pointer over that green check mark. You should see Lurch give you some small positive feedback (\"Good work!\"). Throwing the game Let's make a mistake to be sure that Lurch isn't practicing grade inflation. If we do something mathematically invalid, it ought to make an error. Exercise: Oops In the same document you see above, click the second expression to edit it. Change its meaning from \\(x<0\\) to \\(y<0\\) and click OK. Note that all feedback has disappeared from your document. When you make an edit, Lurch is aware that its previous feedback may no longer apply, and it erases it. Ask Lurch to check your reasoning again, and then use your mouse to hover over the feedback icon for more information. You'll notice that Lurch doesn't tell you that you're wrong. This is appropriate because Lurch doesn't want to jump to conclusions. After all, maybe \\(y<0\\) and maybe it isn't--we haven't specified! So Lurch just lets you know that you haven't provided any evidence to support this conclusion. Whether it's true or false is another matter--Lurch is just reading the evidence you've provided (or failed to provide). Questions? This exercise may have raised many questions in your mind, such as how the first expression counts as an assumption, why it didn't get any feedback attached to it, and what are the limits of Lurch's mathematical knowledge. We will cover all of those things in this tutorial, one at a time. Let's start with learning about assumptions.","title":"Checking your reasoning"},{"location":"tut-04-validation/#checking-your-reasoning","text":"Let's state the obvious. First, we `assume x < 0`. Then we can surely conclude (drum roll) that `x < 0`!","title":"Checking your reasoning"},{"location":"tut-04-validation/#passing-your-first-quiz","text":"The document above contains two meaningful mathematical expressions. You know that they are meaningful (not just expository) because of the blue borders. But Lurch has not yet given any indication of whether the (very simple!) reasoning in the above document is correct. Let's make that happen. Exercise: Ask for a grade In the document shown above, click the Document menu and choose \"Check my reasoning.\" You should find that the second meaningful mathematics gets a green check mark from Lurch, your virtual grader. Hover your mouse pointer over that green check mark. You should see Lurch give you some small positive feedback (\"Good work!\").","title":"Passing your first quiz"},{"location":"tut-04-validation/#throwing-the-game","text":"Let's make a mistake to be sure that Lurch isn't practicing grade inflation. If we do something mathematically invalid, it ought to make an error. Exercise: Oops In the same document you see above, click the second expression to edit it. Change its meaning from \\(x<0\\) to \\(y<0\\) and click OK. Note that all feedback has disappeared from your document. When you make an edit, Lurch is aware that its previous feedback may no longer apply, and it erases it. Ask Lurch to check your reasoning again, and then use your mouse to hover over the feedback icon for more information. You'll notice that Lurch doesn't tell you that you're wrong. This is appropriate because Lurch doesn't want to jump to conclusions. After all, maybe \\(y<0\\) and maybe it isn't--we haven't specified! So Lurch just lets you know that you haven't provided any evidence to support this conclusion. Whether it's true or false is another matter--Lurch is just reading the evidence you've provided (or failed to provide).","title":"Throwing the game"},{"location":"tut-04-validation/#questions","text":"This exercise may have raised many questions in your mind, such as how the first expression counts as an assumption, why it didn't get any feedback attached to it, and what are the limits of Lurch's mathematical knowledge. We will cover all of those things in this tutorial, one at a time. Let's start with learning about assumptions.","title":"Questions?"},{"location":"tut-05-assumptions/","text":"Making assumptions Let's take a second look at the example document below, which you saw already in the previous tutorial . Why did Lurch put positive feedback on the second expression, but not the first? Let's state the obvious. First, we `assume x < 0`. Then we can surely conclude (drum roll) that `x < 0`! In mathematics, most facts are not proven in isolation, but only after making certain assumptions. A theorem will say, \"If such-and-such a fact, then we know that some other facts.\" This is why in a geometry class, many textbooks let a student justify a line in a proof with the word \"given.\" Lurch has support for this essential piece of mathematical reasoning. The user interface for assumptions To make an expression into an assumption, you use a different technique depending on which editing mode you prefer. (Recall the three editing modes introduced at the end of an earlier tutorial .) In beginner mode, there is a checkbox in the expression editing dialog that says \"Assumption\" and is unchecked by default. Check it to make an expression into an assumption; leave it unchecked to have your expression treated as an ordinary statement. In intermediate mode, the top of the expression editing dialog has a drop-down menu for choosing the kind of content you're inserting. One of the options is \"Assumption,\" in contrast to the default \"Statement.\" (There are many other options on that drop-down that we will come to in later tutorial pages.) In advanced mode, you must include in the input you provide a word that signals that the content is an assumption. For isntance, instead of typing x<0 into the dialog box, you can type Assume x<0 . For a full list of the words that signal \"assumption,\" see the Lurch notation reference page . Feedback about assumptions Lurch checks your reasoning to see if any of the steps in it are invalid. But in mathematics, you're allowed to assume whatever you want. (Some assumptions are more useful or strategic than others, but no assumption is an example of invalid reasoning.) Consequently, Lurch does not mark assumptions as right or wrong; it just doesn't mark them at all. You can see this in the document shown at the top of this page. Exercise: Make/break assumptions Edit the document at the top of this page. Change the first expression so that it is no longer an assumption, and ask Lurch to check your reasoning. Does its response make sense to you? (If not, see the explanation below.) Try toggling the \"assumption\" status of that same expression using the other editing modes as well (beginner, intermediate, and advanced). Keeping mistakes local When your document has two copies of the expression \\(x<0\\) , and neither one is marked as an assumption, Lurch grades the first one as unjustified and the second one as justified. The reason for this is that Lurch does not propagate your errors throughout your document, but tries to keep them as contained as possible. To explain this better, consider the following example. Example Betsy is a geometry student who wrote a 10-line proof and submitted it for homework. All the work is correct, except for line 4, which is not properly justified. How many points does Betsy get for this homework problem? Perhaps some geometry teachers would give Betsy 9 out of 10 points, because 9 lines were correct and 10 were incorrect. Perhaps other teachers would give her 3 out of 10 points, because the first 3 lines were correct, but everything after that is suspect, because lines 5-10 might rely on the invalid line 4. Lurch tries to be as generous as possible. If one of your statements is not sufficiently justified, Lurch marks it as such, but later statements are still free to rely on the unjustified one. Thus a proof with even one unjustified statement is not a complete proof, even if all the statements but one have green check marks on them. We chose to have Lurch behave this way because it permits students to assemble a proof in any order. For example, many instructors teach students to work \"from the outside in,\" building some of the starting lines and some of the concluding lines for a proof, before filling in one or two insightful steps in the middle that connects it all together. For example, we will later see examples of proofs like the following, and Lurch will grade most of the work as correct. Example Let \\(x\\) be arbitrary, then assume \\(x>0\\) . Consequenly, \\(x^2+1>0\\) . (Here's the part I need to fill in before submitting my homework!) My goal is to show that \\(x^2+k>p\\) . Once I've shown that, I can conclude that for any \\(x>0\\) , \\(x^2+k>p\\) . In such a proof, Lurch will mark every statement other than the first \\(x^2+k>p\\) correct, because only that one line is missing its justification. This allows students to get positive feedback about their work en route to a complete proof, even if they don't choose to write it in the order it will eventually be read. Speaking of proofs... ...we haven't actually done any yet! Let's do a proof now!","title":"Making assumptions"},{"location":"tut-05-assumptions/#making-assumptions","text":"Let's take a second look at the example document below, which you saw already in the previous tutorial . Why did Lurch put positive feedback on the second expression, but not the first? Let's state the obvious. First, we `assume x < 0`. Then we can surely conclude (drum roll) that `x < 0`! In mathematics, most facts are not proven in isolation, but only after making certain assumptions. A theorem will say, \"If such-and-such a fact, then we know that some other facts.\" This is why in a geometry class, many textbooks let a student justify a line in a proof with the word \"given.\" Lurch has support for this essential piece of mathematical reasoning.","title":"Making assumptions"},{"location":"tut-05-assumptions/#the-user-interface-for-assumptions","text":"To make an expression into an assumption, you use a different technique depending on which editing mode you prefer. (Recall the three editing modes introduced at the end of an earlier tutorial .) In beginner mode, there is a checkbox in the expression editing dialog that says \"Assumption\" and is unchecked by default. Check it to make an expression into an assumption; leave it unchecked to have your expression treated as an ordinary statement. In intermediate mode, the top of the expression editing dialog has a drop-down menu for choosing the kind of content you're inserting. One of the options is \"Assumption,\" in contrast to the default \"Statement.\" (There are many other options on that drop-down that we will come to in later tutorial pages.) In advanced mode, you must include in the input you provide a word that signals that the content is an assumption. For isntance, instead of typing x<0 into the dialog box, you can type Assume x<0 . For a full list of the words that signal \"assumption,\" see the Lurch notation reference page .","title":"The user interface for assumptions"},{"location":"tut-05-assumptions/#feedback-about-assumptions","text":"Lurch checks your reasoning to see if any of the steps in it are invalid. But in mathematics, you're allowed to assume whatever you want. (Some assumptions are more useful or strategic than others, but no assumption is an example of invalid reasoning.) Consequently, Lurch does not mark assumptions as right or wrong; it just doesn't mark them at all. You can see this in the document shown at the top of this page. Exercise: Make/break assumptions Edit the document at the top of this page. Change the first expression so that it is no longer an assumption, and ask Lurch to check your reasoning. Does its response make sense to you? (If not, see the explanation below.) Try toggling the \"assumption\" status of that same expression using the other editing modes as well (beginner, intermediate, and advanced).","title":"Feedback about assumptions"},{"location":"tut-05-assumptions/#keeping-mistakes-local","text":"When your document has two copies of the expression \\(x<0\\) , and neither one is marked as an assumption, Lurch grades the first one as unjustified and the second one as justified. The reason for this is that Lurch does not propagate your errors throughout your document, but tries to keep them as contained as possible. To explain this better, consider the following example. Example Betsy is a geometry student who wrote a 10-line proof and submitted it for homework. All the work is correct, except for line 4, which is not properly justified. How many points does Betsy get for this homework problem? Perhaps some geometry teachers would give Betsy 9 out of 10 points, because 9 lines were correct and 10 were incorrect. Perhaps other teachers would give her 3 out of 10 points, because the first 3 lines were correct, but everything after that is suspect, because lines 5-10 might rely on the invalid line 4. Lurch tries to be as generous as possible. If one of your statements is not sufficiently justified, Lurch marks it as such, but later statements are still free to rely on the unjustified one. Thus a proof with even one unjustified statement is not a complete proof, even if all the statements but one have green check marks on them. We chose to have Lurch behave this way because it permits students to assemble a proof in any order. For example, many instructors teach students to work \"from the outside in,\" building some of the starting lines and some of the concluding lines for a proof, before filling in one or two insightful steps in the middle that connects it all together. For example, we will later see examples of proofs like the following, and Lurch will grade most of the work as correct. Example Let \\(x\\) be arbitrary, then assume \\(x>0\\) . Consequenly, \\(x^2+1>0\\) . (Here's the part I need to fill in before submitting my homework!) My goal is to show that \\(x^2+k>p\\) . Once I've shown that, I can conclude that for any \\(x>0\\) , \\(x^2+k>p\\) . In such a proof, Lurch will mark every statement other than the first \\(x^2+k>p\\) correct, because only that one line is missing its justification. This allows students to get positive feedback about their work en route to a complete proof, even if they don't choose to write it in the order it will eventually be read.","title":"Keeping mistakes local"},{"location":"tut-05-assumptions/#speaking-of-proofs","text":"...we haven't actually done any yet! Let's do a proof now!","title":"Speaking of proofs..."},{"location":"tut-06-environments/","text":"Creating and using environments The very tiny Lurch documents we've seen so far are just to get us started. They are not, of course, representative of real work with the application. Typical mathematical documents will contain multiple theorem statements and their corresponding proofs, possibly with other content as well, such as explanations in between the theorems. The need for environments We therefore need a way to express when a proof begins and when it ends, as well as where theorem statements begin and end. We do this with a feature called environments. Consider the document below, which uses the most basic theorem from propositional logic to illustrate both a theorem environment (the statement of the theorem) and a proof environment (the proof of the theorem). `If P` is true, then we can conclude that `P` is true. Like the theorem says, we'll `assume P` to begin. Then, obviously, `P` is true, so the theorem is proven. Environments are shown, by default, with blue borders around them, just like expressions are, to indicate that they are meaningful portions of the document that Lurch is paying attention to when grading your work. For example, in the small document above, you can see that not only does the final expression in the proof get a green check mark, but the proof as a whole gets a green check mark, as does the corresponding theorem. That's because Lurch knows what those environments mean, and that they should be checked as part of its grading process. Exercise: Mess it up Adjust the document shown above so that the proof is no longer valid. (For example, you could change the final \\(P\\) to a \\(Q\\) .) Ask Lurch to check the document again. Which feedback icons changed? Surprise! If you did the exercise above, you may be surprised to see the result. Why does the theorem keep its green check marks even though its proof is invalid? Is Lurch making a mistake? This is not typical. It is happening here because this theorem is trivial. Lurch actually knows that the theorem is true as soon as it reads it, without seeing the proof, because the theorem is self-evidently true. So it grades the theorem correct without even reading the proof. But then the proof is incorrect, and so is graded as such. But the overwhelming majority of theorems are not trivially true, and thus Lurch will rely on the proof you provide. If you provide an invalid proof, your theorem will immediately lose its green check marks. We'll see that soon in upcoming tutorial pages, when we try some harder proofs. Interacting with environments You can move your cursor in and out of environments in the expected ways, using the mouse and arrow keys. But there are many ways to interact with environments while editing a document, including these: If you right-click an environment (not one of its inner expressions!) you can change which type of environment it is (e.g., from Theorem to Lemma). If your cursor is at the start of an environment and you press Backspace, it merges it with the paragraph before. (This typically deletes the environment, unless the previous paragraph was empty.) If you want to insert a new, empty paragraph above or below the environment containing the cursor, see the relevant items on the Insert menu. For example, you can insert a blank paragraph between the theorem and proof by putting your cursor in the theorem and choosing to insert a paragraph below it. You can add new paragraphs inside a proof (or any kind of environment) by pressing enter while your cursor is inside it. If you instead intended to add a paragraph outside the environment, see the previous bullet point. Too many blue borders? As you can see in the document above, we're starting to get a lot of blue borders around content in the document. On the one hand, this is great, because we know exactly which portions of our document Lurch is paying attention to. But on the other hand, it can be distracting, and it's not how math documents typically look. This is because you are currently in \"editing mode,\" where the user usually wants to see the blue borders, so that they can be aware of how their work is being interpreted. But in \"presentation mode,\" those borders are hidden, so that the document is more easily readable by a human. Exercise: Switch modes Toggle between editing mode and presentation mode using the relevant item on the Document menu. Also try using the corresponding keyboard shortcut (Ctrl+0 on PC, Command+0 on Mac). Note that the shortcut uses a zero, not a capital \"oh.\" More environments If you right-click an environment and choose \"Change environment type,\" you may notice that there are many options besides just Theorem and Proof. We will learn how many of these work in later pages in this tutorial, starting with the next tutorial page, on the Rule environment .","title":"Creating and using environments"},{"location":"tut-06-environments/#creating-and-using-environments","text":"The very tiny Lurch documents we've seen so far are just to get us started. They are not, of course, representative of real work with the application. Typical mathematical documents will contain multiple theorem statements and their corresponding proofs, possibly with other content as well, such as explanations in between the theorems.","title":"Creating and using environments"},{"location":"tut-06-environments/#the-need-for-environments","text":"We therefore need a way to express when a proof begins and when it ends, as well as where theorem statements begin and end. We do this with a feature called environments. Consider the document below, which uses the most basic theorem from propositional logic to illustrate both a theorem environment (the statement of the theorem) and a proof environment (the proof of the theorem). `If P` is true, then we can conclude that `P` is true. Like the theorem says, we'll `assume P` to begin. Then, obviously, `P` is true, so the theorem is proven. Environments are shown, by default, with blue borders around them, just like expressions are, to indicate that they are meaningful portions of the document that Lurch is paying attention to when grading your work. For example, in the small document above, you can see that not only does the final expression in the proof get a green check mark, but the proof as a whole gets a green check mark, as does the corresponding theorem. That's because Lurch knows what those environments mean, and that they should be checked as part of its grading process. Exercise: Mess it up Adjust the document shown above so that the proof is no longer valid. (For example, you could change the final \\(P\\) to a \\(Q\\) .) Ask Lurch to check the document again. Which feedback icons changed? Surprise! If you did the exercise above, you may be surprised to see the result. Why does the theorem keep its green check marks even though its proof is invalid? Is Lurch making a mistake? This is not typical. It is happening here because this theorem is trivial. Lurch actually knows that the theorem is true as soon as it reads it, without seeing the proof, because the theorem is self-evidently true. So it grades the theorem correct without even reading the proof. But then the proof is incorrect, and so is graded as such. But the overwhelming majority of theorems are not trivially true, and thus Lurch will rely on the proof you provide. If you provide an invalid proof, your theorem will immediately lose its green check marks. We'll see that soon in upcoming tutorial pages, when we try some harder proofs.","title":"The need for environments"},{"location":"tut-06-environments/#interacting-with-environments","text":"You can move your cursor in and out of environments in the expected ways, using the mouse and arrow keys. But there are many ways to interact with environments while editing a document, including these: If you right-click an environment (not one of its inner expressions!) you can change which type of environment it is (e.g., from Theorem to Lemma). If your cursor is at the start of an environment and you press Backspace, it merges it with the paragraph before. (This typically deletes the environment, unless the previous paragraph was empty.) If you want to insert a new, empty paragraph above or below the environment containing the cursor, see the relevant items on the Insert menu. For example, you can insert a blank paragraph between the theorem and proof by putting your cursor in the theorem and choosing to insert a paragraph below it. You can add new paragraphs inside a proof (or any kind of environment) by pressing enter while your cursor is inside it. If you instead intended to add a paragraph outside the environment, see the previous bullet point.","title":"Interacting with environments"},{"location":"tut-06-environments/#too-many-blue-borders","text":"As you can see in the document above, we're starting to get a lot of blue borders around content in the document. On the one hand, this is great, because we know exactly which portions of our document Lurch is paying attention to. But on the other hand, it can be distracting, and it's not how math documents typically look. This is because you are currently in \"editing mode,\" where the user usually wants to see the blue borders, so that they can be aware of how their work is being interpreted. But in \"presentation mode,\" those borders are hidden, so that the document is more easily readable by a human. Exercise: Switch modes Toggle between editing mode and presentation mode using the relevant item on the Document menu. Also try using the corresponding keyboard shortcut (Ctrl+0 on PC, Command+0 on Mac). Note that the shortcut uses a zero, not a capital \"oh.\"","title":"Too many blue borders?"},{"location":"tut-06-environments/#more-environments","text":"If you right-click an environment and choose \"Change environment type,\" you may notice that there are many options besides just Theorem and Proof. We will learn how many of these work in later pages in this tutorial, starting with the next tutorial page, on the Rule environment .","title":"More environments"},{"location":"tut-07-rules/","text":"Reading and using rules Lurch starts out empty Consider the following simple bit of mathematics, which Lurch does not consider to be a valid inference. What could possibly be going on? `Assume x < 0`. Then surely `x < 10`. The reason Lurch does not grade this as correct is because, by default, Lurch has absolutely no meaning for any mathematical symbols loaded. In other words, Lurch does not assume any particular meaning for symbols like \\(<\\) or \\(0\\) or \\(10\\) . If you want it to know how those symbols operate, you have to load in a mathematical library that defines them. Then those symbols will behave in the expected way. (Depending, of course, on which mathematical definitions appear in the library you load!) Add meaning with rules In order for Lurch to permit new inferences that don't hold by default, we must give it new facts. These come in the form of new Rules or Axioms. In practice, a rule and an axiom behave exactly the same in Lurch, but typically if you're building a logical system, you form it out of \"rules,\" and if you're building a mathematical theory, you form it out of \"axioms.\" You can use whichever word you prefer; they behave the same way. Let's take the document above and some facts that will help us get the conclusion we're hoping for. The less than operation is transitive. Specifically, if we `assume a < b` and we `assume b < c` then we can conclude `a < c`. `0 < 10` Now we should be able to get the conclusion we want: If we `assume x < 0` then we can conclude that `x < 10`. Checking your reasoning with rules Notice that rules and axioms do not get checked. You can make whatever you like into a rule or axiom, and Lurch will not argue with you. Exercise: Even more transitive Add a new assumption to the end of the document immediately above, that \\(10 < x^2\\) . After that assumption, conclude that \\(x < x^2\\) . Now delete the expression that says \\(x < 10\\) . Does Lurch still grade your final conclusion of \\(10 < x^2\\) correct? The exercise above shows that Lurch can fill in some basic steps of reasoning. (Obviously it can't fill in too many missing steps, or it would be an automated theorem prover, and that's not its goal.) But in this case, it was able to fill in the missing \\(x < 10\\) that you deleted, and use it to complete the chain of reasoning. If you're an instructor and you're worried that perhaps Lurch is too forgiving, filling in steps that students ought to have to write down to show that they know what they're talking about, fear not. We aim to make Lurch's intelligence customizable, so that you can choose how many steps (if any) it will let the user skip. But that feature is still to come. Where to go from here? There are two possible next steps. If you want to dive into the nitty gritty of how rules are defined, you can step off onto a rabbit trail about why the rule shown above is actually wrong . But if you just want to move along with the main tutorial, check out how to hide and show rules to make documents more compact .","title":"Reading and using rules"},{"location":"tut-07-rules/#reading-and-using-rules","text":"","title":"Reading and using rules"},{"location":"tut-07-rules/#lurch-starts-out-empty","text":"Consider the following simple bit of mathematics, which Lurch does not consider to be a valid inference. What could possibly be going on? `Assume x < 0`. Then surely `x < 10`. The reason Lurch does not grade this as correct is because, by default, Lurch has absolutely no meaning for any mathematical symbols loaded. In other words, Lurch does not assume any particular meaning for symbols like \\(<\\) or \\(0\\) or \\(10\\) . If you want it to know how those symbols operate, you have to load in a mathematical library that defines them. Then those symbols will behave in the expected way. (Depending, of course, on which mathematical definitions appear in the library you load!)","title":"Lurch starts out empty"},{"location":"tut-07-rules/#add-meaning-with-rules","text":"In order for Lurch to permit new inferences that don't hold by default, we must give it new facts. These come in the form of new Rules or Axioms. In practice, a rule and an axiom behave exactly the same in Lurch, but typically if you're building a logical system, you form it out of \"rules,\" and if you're building a mathematical theory, you form it out of \"axioms.\" You can use whichever word you prefer; they behave the same way. Let's take the document above and some facts that will help us get the conclusion we're hoping for. The less than operation is transitive. Specifically, if we `assume a < b` and we `assume b < c` then we can conclude `a < c`. `0 < 10` Now we should be able to get the conclusion we want: If we `assume x < 0` then we can conclude that `x < 10`.","title":"Add meaning with rules"},{"location":"tut-07-rules/#checking-your-reasoning-with-rules","text":"Notice that rules and axioms do not get checked. You can make whatever you like into a rule or axiom, and Lurch will not argue with you. Exercise: Even more transitive Add a new assumption to the end of the document immediately above, that \\(10 < x^2\\) . After that assumption, conclude that \\(x < x^2\\) . Now delete the expression that says \\(x < 10\\) . Does Lurch still grade your final conclusion of \\(10 < x^2\\) correct? The exercise above shows that Lurch can fill in some basic steps of reasoning. (Obviously it can't fill in too many missing steps, or it would be an automated theorem prover, and that's not its goal.) But in this case, it was able to fill in the missing \\(x < 10\\) that you deleted, and use it to complete the chain of reasoning. If you're an instructor and you're worried that perhaps Lurch is too forgiving, filling in steps that students ought to have to write down to show that they know what they're talking about, fear not. We aim to make Lurch's intelligence customizable, so that you can choose how many steps (if any) it will let the user skip. But that feature is still to come.","title":"Checking your reasoning with rules"},{"location":"tut-07-rules/#where-to-go-from-here","text":"There are two possible next steps. If you want to dive into the nitty gritty of how rules are defined, you can step off onto a rabbit trail about why the rule shown above is actually wrong . But if you just want to move along with the main tutorial, check out how to hide and show rules to make documents more compact .","title":"Where to go from here?"},{"location":"tut-07b-metavariables/","text":"How substitution works in Lurch Warning: Fiddly details of interest to instructors This page of the tutorial is a bit of a rabbit trail into some subtleties of how Lurch functions, but should be of interest to anyone who wants to define a new mathematical system in Lurch from the ground up. We aim to provide several such systems pre-built for users eventually, but for those who are interested in developing Lurch or getting in on alpha testing, this content is relevant. In particular, no student should need to read this page! We know where to substitute, and where not to Mathematicians and our students develop a sense for which parts of a theorem or axiom are \"for substitution\" and which are not. For example, consider the following basic fact from Euclidean geometry. Theorem In a triangle with angles \\(\\alpha\\) , \\(\\beta\\) , and \\(\\gamma\\) , measured in radians, we have \\(\\alpha+\\beta+\\gamma=\\pi\\) . Working in mathematics, we understand that if you later come to an isosceles triangle with angles measuring \\(a\\) , \\(a\\) , and \\(b\\) radians, respectively, you can conclude that \\(a+a+b=\\pi\\) , because we used the above theorem and substituted \\(\\alpha=a\\) , \\(\\beta=a\\) , \\(\\gamma=b\\) . But it's understood that the only symbols you're allowed to substitute in for are \\(\\alpha\\) , \\(\\beta\\) , and \\(\\gamma\\) . That is, the \\(\\pi\\) (despite being another lower-case Greek letter) is not available for substitution--you can't have the sum of the triangle's angles equal to whatever you want! Perhaps more subtly, the \\(+\\) and \\(=\\) are other mathematical symbols, and we're not allowed to substitute for them, either. Otherwise, the theorem above would begin to say all manner of unexpected things, such as \\(a-b-c>0\\) , which is clearly not the intent. So how is it that we know intuitively which symbols are implicitly universally quantified and which are not? There are no universal quantifiers on the above theorem, so nobody explicitly told us that \\(\\alpha\\) , \\(\\beta\\) , and \\(\\gamma\\) were the ones you can replace. More importantly, how is software like Lurch to make the decision, since it does not have human intuition to guide it? What is a metavariable? In logic, we use the term metavariable to mean a symbol in a metalanguage that can be replaced by any expression in an object language. Since Lurch is a piece of software in which you can design and use many different logical systems, the method of substitution provided in the software is like that of a metatheory that exists outside of any one particular mathematical topic you might choose to define in it and use it to reason about. So the question we're asking in this page of the tutorial is: How does Lurch decide, when looking at a theorem, axiom, etc., which symbols in it are metavariables and which are not? The answer is that Lurch requires you, before you state a theorem, axiom, or similar construct, to declare all of the symbols that you do not want to be treated as metavariables. Returning to the example at the top of this page, the symbols \\(+\\) , \\(=\\) , and \\(\\pi\\) have pre-existing meanings, so that they are not to be allowed to be used for substitution. In Lurch, this would mean that you should declare these special symbols before the statement of the theorem, so that Lurch knows that they have a set meaning and can never be metavariables. Let's see how this works in practice. Doing it the wrong way The following Lurch document defines one simple rule from propositional logic, but that rule does not behave the way we intend, the way that matches our intuition. (Don't worry; we will fix it in the next section.) The reason for the problem is that we have not declared any symbols, and thus every symbol in the declared rule functions like a metavariable. Notice the erroneous inference in the document below. **Erroneous conjunction introduction rule:** `Assume A` and `assume B`. Then `A and B`. Now `assume X` and `assume Y`, and we will use the above rule twice, once to conclude `X and Y` and once to conclude `X - Y`. Oh no! What went wrong? Recall that this Lurch document has not imported any mathematical concepts, and thus it is building a mathematical system from the ground up. Consequently, words we would expect to have a meaning, such as \"and\" do not have any special meaning. Thus the word \"and\" in the rule defined above functions just like the \\(A\\) and \\(B\\) do; it's a variable and you can substitute another operator in for it. Since this is almost certainly not the intended meaning of the rule, we can fix it as follows. Doing it the right way Just start the document by saying that \"and\" is a symbol that's part of the mathematical system we're building, and thus has a fixed meaning. You do this with the special word \"declare.\" `Declare and`, so that it now has a fixed meaning. **The same rule from earlier, no longer erroneous:** `Assume A` and `assume B`. Then `A and B`. Now `assume X` and `assume Y`, and we can still use that rule to conclude `X and Y`, but we can no longer use it to conclude `X+Y`. Great! In short: Lurch treates every symbol as a metavariable, unless you explicitly \"declare\" it first.","title":"How substitution works in Lurch"},{"location":"tut-07b-metavariables/#how-substitution-works-in-lurch","text":"Warning: Fiddly details of interest to instructors This page of the tutorial is a bit of a rabbit trail into some subtleties of how Lurch functions, but should be of interest to anyone who wants to define a new mathematical system in Lurch from the ground up. We aim to provide several such systems pre-built for users eventually, but for those who are interested in developing Lurch or getting in on alpha testing, this content is relevant. In particular, no student should need to read this page!","title":"How substitution works in Lurch"},{"location":"tut-07b-metavariables/#we-know-where-to-substitute-and-where-not-to","text":"Mathematicians and our students develop a sense for which parts of a theorem or axiom are \"for substitution\" and which are not. For example, consider the following basic fact from Euclidean geometry. Theorem In a triangle with angles \\(\\alpha\\) , \\(\\beta\\) , and \\(\\gamma\\) , measured in radians, we have \\(\\alpha+\\beta+\\gamma=\\pi\\) . Working in mathematics, we understand that if you later come to an isosceles triangle with angles measuring \\(a\\) , \\(a\\) , and \\(b\\) radians, respectively, you can conclude that \\(a+a+b=\\pi\\) , because we used the above theorem and substituted \\(\\alpha=a\\) , \\(\\beta=a\\) , \\(\\gamma=b\\) . But it's understood that the only symbols you're allowed to substitute in for are \\(\\alpha\\) , \\(\\beta\\) , and \\(\\gamma\\) . That is, the \\(\\pi\\) (despite being another lower-case Greek letter) is not available for substitution--you can't have the sum of the triangle's angles equal to whatever you want! Perhaps more subtly, the \\(+\\) and \\(=\\) are other mathematical symbols, and we're not allowed to substitute for them, either. Otherwise, the theorem above would begin to say all manner of unexpected things, such as \\(a-b-c>0\\) , which is clearly not the intent. So how is it that we know intuitively which symbols are implicitly universally quantified and which are not? There are no universal quantifiers on the above theorem, so nobody explicitly told us that \\(\\alpha\\) , \\(\\beta\\) , and \\(\\gamma\\) were the ones you can replace. More importantly, how is software like Lurch to make the decision, since it does not have human intuition to guide it?","title":"We know where to substitute, and where not to"},{"location":"tut-07b-metavariables/#what-is-a-metavariable","text":"In logic, we use the term metavariable to mean a symbol in a metalanguage that can be replaced by any expression in an object language. Since Lurch is a piece of software in which you can design and use many different logical systems, the method of substitution provided in the software is like that of a metatheory that exists outside of any one particular mathematical topic you might choose to define in it and use it to reason about. So the question we're asking in this page of the tutorial is: How does Lurch decide, when looking at a theorem, axiom, etc., which symbols in it are metavariables and which are not? The answer is that Lurch requires you, before you state a theorem, axiom, or similar construct, to declare all of the symbols that you do not want to be treated as metavariables. Returning to the example at the top of this page, the symbols \\(+\\) , \\(=\\) , and \\(\\pi\\) have pre-existing meanings, so that they are not to be allowed to be used for substitution. In Lurch, this would mean that you should declare these special symbols before the statement of the theorem, so that Lurch knows that they have a set meaning and can never be metavariables. Let's see how this works in practice.","title":"What is a metavariable?"},{"location":"tut-07b-metavariables/#doing-it-the-wrong-way","text":"The following Lurch document defines one simple rule from propositional logic, but that rule does not behave the way we intend, the way that matches our intuition. (Don't worry; we will fix it in the next section.) The reason for the problem is that we have not declared any symbols, and thus every symbol in the declared rule functions like a metavariable. Notice the erroneous inference in the document below. **Erroneous conjunction introduction rule:** `Assume A` and `assume B`. Then `A and B`. Now `assume X` and `assume Y`, and we will use the above rule twice, once to conclude `X and Y` and once to conclude `X - Y`. Oh no! What went wrong? Recall that this Lurch document has not imported any mathematical concepts, and thus it is building a mathematical system from the ground up. Consequently, words we would expect to have a meaning, such as \"and\" do not have any special meaning. Thus the word \"and\" in the rule defined above functions just like the \\(A\\) and \\(B\\) do; it's a variable and you can substitute another operator in for it. Since this is almost certainly not the intended meaning of the rule, we can fix it as follows.","title":"Doing it the wrong way"},{"location":"tut-07b-metavariables/#doing-it-the-right-way","text":"Just start the document by saying that \"and\" is a symbol that's part of the mathematical system we're building, and thus has a fixed meaning. You do this with the special word \"declare.\" `Declare and`, so that it now has a fixed meaning. **The same rule from earlier, no longer erroneous:** `Assume A` and `assume B`. Then `A and B`. Now `assume X` and `assume Y`, and we can still use that rule to conclude `X and Y`, but we can no longer use it to conclude `X+Y`. Great! In short: Lurch treates every symbol as a metavariable, unless you explicitly \"declare\" it first.","title":"Doing it the right way"},{"location":"tut-08-document-header/","text":"Hiding and showing rules { \"menuData\" : { \"document\" : { \"title\" : \"Document\", \"items\" : \"editheader | validate clearvalidation | docsettings temptoggle\" } } } Tell Lurch which symbols are reserved in our mathematical system: `Declare and`. **Conjunction introduction:** `Assume A` and `assume B`. Then `A and B`. `Assume X` and also `assume Y`. We can use the standard conjunction introduction rule to conclude `X and Y`. How did we do that? The document above shows the exact same reasoning that we saw in the previous tutorial page (and, optionally, in the corresponding rabbit trail for instructors ), but this time there is no conjunction introduction rule stated. Where did it come from? The document header Every document has an invisible header, which is an initial segment of the document that is hidden from view. It is a place for the document author to put any background material on which the document content relies. Then the document is not cluttered with too many definitions, but Lurch still knows what math the user is allowed to rely upon in their reasoning. In the main Lurch application, instructors can edit the contents of the document header, importing entire other documents into it by specifying their web address. We will not cover that feature here. In the small copy of Lurch included in these tutorial pages, we provide a simple way for you to view and edit the document header: From the Document menu, choose \"Edit document header in new window.\" This opens a new tab in your browser containing the document header. The border of that document is blue dashes, to make it clear that it's not a document in its own right, just the header of some other document. If you make changes and save, they propagate back to the header in the original browser tab. Exercise: View the header In the document shown above, use the method just described to view its header. That is, click the Document menu, and choose \"Edit document header in new window.\" Why is this useful? Although all the Lurch documents shown so far in this tutorial have been small, you can imagine a document built on a large, sophisticated mathematical system, with dozens of rules, axioms, and theorems already defined and proven, ready for use. (In fact, you don't have to imagine it--an example with most of the rules of propositional logic appears on the homepage of this documentation site .) It would be cumbersome to have all that content at the top of every document that wanted to use it, and you would need to scroll past it all to get to the area where you can do your own work. So instead, such content can be hidden in the document header, still usable in your work, but not always in your way. Furthermore, sometimes the nitty gritty details of how the rules of logic for a system have been defined are not of interest to the reader, who prefers to think and read at a higher level, where mathematical theorems are being proven. So it's nice to hide the low-level content for that reason as well. Finally, a student working on proofs may want to know which theorems and rules have already been proven, and not want to scroll up and down over and over to find them. Having the header openable in a separate tab means you can place two browser windows side-by-side, read the theorems in one, and write your work in the one next to it. Not everyone will want to work this way, but it is at least an option for those who want it. Exercise: Change the header Ensure that you have the header of the above document open in a new tab, as in the previous exercise. In the header's tab, make a change to the conjunction introduction\\ rule. For example, you might delete the conclusion, so that the rule no longer has any value. Still in the header's tab, save your work using the File menu. Back on this page, in the Lurch document shown above, use the Document menu to re-check the reasoning in the document. Observe that the conclusion is no longer judged correct, because you removed from the document header the rule on which it depended. Lurch doesn't always use the header When Lurch documents get more complex, even writing the rules in the header is too cumbersome. Once you're 10 weeks into a course, you've learned too much mathematics to sum it up in one document. So you can make a series of Lurch documents, each importing all the content of earlier ones. But that is for a more advanced section of the tutorial. For now, we will use the header to store the small number of rules we'll need for each example. Let's do some actual mathematics As stated above, all the example documents in this tutorial series so far have been very small, using just one tiny rule of logic at a time. Let's get to some legitimate mathematical proofs! But we're not going to jump right into number theory or real analysis from here; we'll go one step at a time, beginning with propositional logic .","title":"Hiding and showing rules"},{"location":"tut-08-document-header/#hiding-and-showing-rules","text":"{ \"menuData\" : { \"document\" : { \"title\" : \"Document\", \"items\" : \"editheader | validate clearvalidation | docsettings temptoggle\" } } } Tell Lurch which symbols are reserved in our mathematical system: `Declare and`. **Conjunction introduction:** `Assume A` and `assume B`. Then `A and B`. `Assume X` and also `assume Y`. We can use the standard conjunction introduction rule to conclude `X and Y`. How did we do that? The document above shows the exact same reasoning that we saw in the previous tutorial page (and, optionally, in the corresponding rabbit trail for instructors ), but this time there is no conjunction introduction rule stated. Where did it come from?","title":"Hiding and showing rules"},{"location":"tut-08-document-header/#the-document-header","text":"Every document has an invisible header, which is an initial segment of the document that is hidden from view. It is a place for the document author to put any background material on which the document content relies. Then the document is not cluttered with too many definitions, but Lurch still knows what math the user is allowed to rely upon in their reasoning. In the main Lurch application, instructors can edit the contents of the document header, importing entire other documents into it by specifying their web address. We will not cover that feature here. In the small copy of Lurch included in these tutorial pages, we provide a simple way for you to view and edit the document header: From the Document menu, choose \"Edit document header in new window.\" This opens a new tab in your browser containing the document header. The border of that document is blue dashes, to make it clear that it's not a document in its own right, just the header of some other document. If you make changes and save, they propagate back to the header in the original browser tab. Exercise: View the header In the document shown above, use the method just described to view its header. That is, click the Document menu, and choose \"Edit document header in new window.\"","title":"The document header"},{"location":"tut-08-document-header/#why-is-this-useful","text":"Although all the Lurch documents shown so far in this tutorial have been small, you can imagine a document built on a large, sophisticated mathematical system, with dozens of rules, axioms, and theorems already defined and proven, ready for use. (In fact, you don't have to imagine it--an example with most of the rules of propositional logic appears on the homepage of this documentation site .) It would be cumbersome to have all that content at the top of every document that wanted to use it, and you would need to scroll past it all to get to the area where you can do your own work. So instead, such content can be hidden in the document header, still usable in your work, but not always in your way. Furthermore, sometimes the nitty gritty details of how the rules of logic for a system have been defined are not of interest to the reader, who prefers to think and read at a higher level, where mathematical theorems are being proven. So it's nice to hide the low-level content for that reason as well. Finally, a student working on proofs may want to know which theorems and rules have already been proven, and not want to scroll up and down over and over to find them. Having the header openable in a separate tab means you can place two browser windows side-by-side, read the theorems in one, and write your work in the one next to it. Not everyone will want to work this way, but it is at least an option for those who want it. Exercise: Change the header Ensure that you have the header of the above document open in a new tab, as in the previous exercise. In the header's tab, make a change to the conjunction introduction\\ rule. For example, you might delete the conclusion, so that the rule no longer has any value. Still in the header's tab, save your work using the File menu. Back on this page, in the Lurch document shown above, use the Document menu to re-check the reasoning in the document. Observe that the conclusion is no longer judged correct, because you removed from the document header the rule on which it depended.","title":"Why is this useful?"},{"location":"tut-08-document-header/#lurch-doesnt-always-use-the-header","text":"When Lurch documents get more complex, even writing the rules in the header is too cumbersome. Once you're 10 weeks into a course, you've learned too much mathematics to sum it up in one document. So you can make a series of Lurch documents, each importing all the content of earlier ones. But that is for a more advanced section of the tutorial. For now, we will use the header to store the small number of rules we'll need for each example.","title":"Lurch doesn't always use the header"},{"location":"tut-08-document-header/#lets-do-some-actual-mathematics","text":"As stated above, all the example documents in this tutorial series so far have been very small, using just one tiny rule of logic at a time. Let's get to some legitimate mathematical proofs! But we're not going to jump right into number theory or real analysis from here; we'll go one step at a time, beginning with propositional logic .","title":"Let's do some actual mathematics"},{"location":"tut-09a-real-math/","text":"Real mathematics, part 1 Well, okay, propositional logic, but real proofs! One of the early topics in some introduction to proof courses is logic, often starting with propositional logic. You may have noticed the example proof below (in propositional logic) on the documentation home page . { \"menuData\" : { \"document\" : { \"title\" : \"Document\", \"items\" : \"editheader | validate clearvalidation | docsettings temptoggle\" } } } We tell Lurch which symbols our mathematical system requires like this: `Declare and, or, implies, not`. **Conjunction introduction:** `If A` and `if B` then we can conclude `A and B`. **Conjunction elimination:** `If A and B` then we can conclude `A` and separately conclude `B`. **Disjunction introduction:** `If A` then we can conclude `A or B`, conclude `B or A`, or even both. **Disjunction elimination:** (Version 1) `If A or B` and `not A` then it must be `B`. (Version 2) `If A or B` and `not B` then it must be `A`. **Conditional introduction:** To prove a conditional, we must construct a subproof of the following form. `Assume A`. Then, typically after some work, prove `B`. From that subproof, we can conclude `A implies B`. **Conditional elimination:** `If A implies B` and `if A`, then we can conclude `B`. **Negation introduction:** If we start a subproof with \"`assume A`\" and we end it with a contradiction, say `B` and `not B`, then we can end the subproof... ...and conclude `not A`. **Negation elimination:** If we start a subproof with \"`assume not A`\" and we end it with a contradiction, say `B` and `not B`, then we can end the subproof... ...and conclude `A`. **Contrapositive:** `If X implies Y` then `not Y implies not X`. `Assume X implies Y`. To establish the contrapositive, we must use a subproof. `Assume not Y`. The easiest way to show $\\neg X$ is with an inner subproof. `Assume X`. Then we can apply the original assumption to conclude `Y`, but we already know that `not Y` is true. That's a contradiction. So outside that inner subproof, we can conclude `not X`. Since we assumed $\\neg Y$ and proved $\\neg X$ from it, we can conclude `not Y implies not X`. The rules are in the header As discussed in the previous tutorial page , the mathematical system being used is hidden in the document header, so that it does not clutter up the document. But you can view it with the Document menu, and the first item, \"Edit document header in new window.\" Exercise: Read the logical rules Take a look at how the rules for propositional logic are defined in Lurch, by viewing the document header as described above. You may notice: It begins by declaring some symbols. If this is unexpected, refer back to a page for instructors from earlier in this tutorial. Each rule of logic is an environment of type \"Rule.\" That has several implications, including that Lurch will not check the reasoning inside of it, but just accept that all substitution instances of it are valid types of inference. Recall that only the content inside blue expression bubbles is used for checking reasoning, so a lot of the text in the header is just for expository purposes only, including the name of each rule, and the explanatory text connecting its premises to its conclusion. For rules that expect one to build a subproof before using them (e.g., the rule for conditional introduction), the rule contains an environment called a \"Premise,\" which means that the user of the rule must build a subproof shaped like that environment in order to use the rule. Theorems and proofs Just as LaTeX contains theorem environments and proof environments, so does Lurch. And just as LaTeX theorem environments are where you place the statement of your theorem, and LaTeX proof environments are where you place the proof of your theorem, they function the same way in Lurch as well. If you examine the document above, which contains one theorem and its proof, you will see this pattern holds there. Let's try constructing a new theorem-proof pair in the same document, below the one that's already there, and proving a new fact. Yes, let's prove your first theorem in Lurch! Exercise: Create a theorem-proof pair Place your cursor at the very bottom of the document in the editor above. It will be inside the proof, just before its end. Press enter. Uh-oh! Lurch assumed you wanted to add new content inside the proof. That's not what we want. Use the Insert menu to add an \"Empty paragraph below\" the proof (or use the keyboard shortcut you find there). Now that we have space to insert a new theorem, use the Insert menu, choose Environment, and pick \"theorem\" from the list of options. Click OK. You should see a new, empty Theorem in your document. Leave it empty for now. Repeat the same steps as above to create an empty proof after your theorem. (You'll need to Insert > Empty paragraph below again.) Tip: Use shortcuts Just like in LaTeX, Lurch knows about some shortcuts, triggered by the backslash ( \\ ) key. For example, instead of using the Insert menu to add a proof, you could type \\proof , and it would offer to insert one for you. In fact, as soon as you type \\p , it's already offering to insert a proof, and you can just press Enter to accept. Stating a basic theorem Exercise: A theorem without a proof Try entering the following theorem into your empty Theorem environment: If \\(X\\text{ and }Y\\) then \\(Y\\text{ or }Z\\) . Warning It is essential for you to mark the first expression as an assumption and the second as a statement! For a reminder on how to distinguish those two things, refer back to an earlier page in this tutorial . What happens if you ask Lurch to check your work at this point? The theorem does not yet have a proof, but it gets a green check mark anyway! The reason is that this theorem is so obvious that Lurch can tell it's true just from trivial applications of the rules of logic, without the user's help. This is actually a downside if you're teaching propositional logic! But don't worry. Future versions of Lurch will have customizable levels of helpfulness, so that the software doesn't do \"too much\" on the student's behalf. Right now, however, we have just one setting, and that's Lurch at maximal helpfulness. What did we learn? We learned how to state theorems and build empty proofs! Let's move on to a theorem that's tricky enough we actually have to prove it. .","title":"Real mathematics, part 1"},{"location":"tut-09a-real-math/#real-mathematics-part-1","text":"","title":"Real mathematics, part 1"},{"location":"tut-09a-real-math/#well-okay-propositional-logic-but-real-proofs","text":"One of the early topics in some introduction to proof courses is logic, often starting with propositional logic. You may have noticed the example proof below (in propositional logic) on the documentation home page . { \"menuData\" : { \"document\" : { \"title\" : \"Document\", \"items\" : \"editheader | validate clearvalidation | docsettings temptoggle\" } } } We tell Lurch which symbols our mathematical system requires like this: `Declare and, or, implies, not`. **Conjunction introduction:** `If A` and `if B` then we can conclude `A and B`. **Conjunction elimination:** `If A and B` then we can conclude `A` and separately conclude `B`. **Disjunction introduction:** `If A` then we can conclude `A or B`, conclude `B or A`, or even both. **Disjunction elimination:** (Version 1) `If A or B` and `not A` then it must be `B`. (Version 2) `If A or B` and `not B` then it must be `A`. **Conditional introduction:** To prove a conditional, we must construct a subproof of the following form. `Assume A`. Then, typically after some work, prove `B`. From that subproof, we can conclude `A implies B`. **Conditional elimination:** `If A implies B` and `if A`, then we can conclude `B`. **Negation introduction:** If we start a subproof with \"`assume A`\" and we end it with a contradiction, say `B` and `not B`, then we can end the subproof... ...and conclude `not A`. **Negation elimination:** If we start a subproof with \"`assume not A`\" and we end it with a contradiction, say `B` and `not B`, then we can end the subproof... ...and conclude `A`. **Contrapositive:** `If X implies Y` then `not Y implies not X`. `Assume X implies Y`. To establish the contrapositive, we must use a subproof. `Assume not Y`. The easiest way to show $\\neg X$ is with an inner subproof. `Assume X`. Then we can apply the original assumption to conclude `Y`, but we already know that `not Y` is true. That's a contradiction. So outside that inner subproof, we can conclude `not X`. Since we assumed $\\neg Y$ and proved $\\neg X$ from it, we can conclude `not Y implies not X`.","title":"Well, okay, propositional logic, but real proofs!"},{"location":"tut-09a-real-math/#the-rules-are-in-the-header","text":"As discussed in the previous tutorial page , the mathematical system being used is hidden in the document header, so that it does not clutter up the document. But you can view it with the Document menu, and the first item, \"Edit document header in new window.\" Exercise: Read the logical rules Take a look at how the rules for propositional logic are defined in Lurch, by viewing the document header as described above. You may notice: It begins by declaring some symbols. If this is unexpected, refer back to a page for instructors from earlier in this tutorial. Each rule of logic is an environment of type \"Rule.\" That has several implications, including that Lurch will not check the reasoning inside of it, but just accept that all substitution instances of it are valid types of inference. Recall that only the content inside blue expression bubbles is used for checking reasoning, so a lot of the text in the header is just for expository purposes only, including the name of each rule, and the explanatory text connecting its premises to its conclusion. For rules that expect one to build a subproof before using them (e.g., the rule for conditional introduction), the rule contains an environment called a \"Premise,\" which means that the user of the rule must build a subproof shaped like that environment in order to use the rule.","title":"The rules are in the header"},{"location":"tut-09a-real-math/#theorems-and-proofs","text":"Just as LaTeX contains theorem environments and proof environments, so does Lurch. And just as LaTeX theorem environments are where you place the statement of your theorem, and LaTeX proof environments are where you place the proof of your theorem, they function the same way in Lurch as well. If you examine the document above, which contains one theorem and its proof, you will see this pattern holds there. Let's try constructing a new theorem-proof pair in the same document, below the one that's already there, and proving a new fact. Yes, let's prove your first theorem in Lurch! Exercise: Create a theorem-proof pair Place your cursor at the very bottom of the document in the editor above. It will be inside the proof, just before its end. Press enter. Uh-oh! Lurch assumed you wanted to add new content inside the proof. That's not what we want. Use the Insert menu to add an \"Empty paragraph below\" the proof (or use the keyboard shortcut you find there). Now that we have space to insert a new theorem, use the Insert menu, choose Environment, and pick \"theorem\" from the list of options. Click OK. You should see a new, empty Theorem in your document. Leave it empty for now. Repeat the same steps as above to create an empty proof after your theorem. (You'll need to Insert > Empty paragraph below again.) Tip: Use shortcuts Just like in LaTeX, Lurch knows about some shortcuts, triggered by the backslash ( \\ ) key. For example, instead of using the Insert menu to add a proof, you could type \\proof , and it would offer to insert one for you. In fact, as soon as you type \\p , it's already offering to insert a proof, and you can just press Enter to accept.","title":"Theorems and proofs"},{"location":"tut-09a-real-math/#stating-a-basic-theorem","text":"Exercise: A theorem without a proof Try entering the following theorem into your empty Theorem environment: If \\(X\\text{ and }Y\\) then \\(Y\\text{ or }Z\\) . Warning It is essential for you to mark the first expression as an assumption and the second as a statement! For a reminder on how to distinguish those two things, refer back to an earlier page in this tutorial . What happens if you ask Lurch to check your work at this point? The theorem does not yet have a proof, but it gets a green check mark anyway! The reason is that this theorem is so obvious that Lurch can tell it's true just from trivial applications of the rules of logic, without the user's help. This is actually a downside if you're teaching propositional logic! But don't worry. Future versions of Lurch will have customizable levels of helpfulness, so that the software doesn't do \"too much\" on the student's behalf. Right now, however, we have just one setting, and that's Lurch at maximal helpfulness.","title":"Stating a basic theorem"},{"location":"tut-09a-real-math/#what-did-we-learn","text":"We learned how to state theorems and build empty proofs! Let's move on to a theorem that's tricky enough we actually have to prove it. .","title":"What did we learn?"},{"location":"tut-09b-real-math/","text":"This tutorial page is coming soon Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-09b-real-math/#this-tutorial-page-is-coming-soon","text":"Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-09c-real-math/","text":"This tutorial page is coming soon Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-09c-real-math/#this-tutorial-page-is-coming-soon","text":"Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-09d-real-math/","text":"This tutorial page is coming soon Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tut-09d-real-math/#this-tutorial-page-is-coming-soon","text":"Check back later to read this tutorial page. We are actively developing this project and its documentation in Spring 2024.","title":"This tutorial page is coming soon"},{"location":"tutorial-toc/","text":"Lurch Tutorials The tutorial series below is for the Lurch application that is online here . Warning This tutorial series covers only a portion of what Lurch can do. We are actively developing it still. What you see below are the tutorials written so far. Basics Lurch as a word processor Adding some mathematics Making mathematics meaningful Checking your reasoning The main ingredients Making assumptions Creating and using environments Reading and using rules Hiding and showing rules Your first proofs Part 1: Propositional logic Part 2: Constructing a proof (not yet written---coming soon!) Part 3: Subproofs exercise (not yet written---coming soon!) Part 4: Subproofs solution (not yet written---coming soon!)","title":"Tutorial"},{"location":"tutorial-toc/#lurch-tutorials","text":"The tutorial series below is for the Lurch application that is online here . Warning This tutorial series covers only a portion of what Lurch can do. We are actively developing it still. What you see below are the tutorials written so far.","title":"Lurch Tutorials"},{"location":"tutorial-toc/#basics","text":"Lurch as a word processor Adding some mathematics Making mathematics meaningful Checking your reasoning","title":"Basics"},{"location":"tutorial-toc/#the-main-ingredients","text":"Making assumptions Creating and using environments Reading and using rules Hiding and showing rules","title":"The main ingredients"},{"location":"tutorial-toc/#your-first-proofs","text":"Part 1: Propositional logic Part 2: Constructing a proof (not yet written---coming soon!) Part 3: Subproofs exercise (not yet written---coming soon!) Part 4: Subproofs solution (not yet written---coming soon!)","title":"Your first proofs"},{"location":"what-is-a-lurch-site/","text":"What is a Lurch Site? The problem Lurch Sites solve While it's true that anyone can try Lurch online right now , that copy of the app is the \"plain vanilla\" version, which means: it has the default configuration (just one of many possible ways to configure the app), and it does not include any example mathematical definitions, axioms, or theorems, so you can do only very tiny and uninteresting proofs. We cannot solve this problem just by adding to that app a lot of documents that define interesting mathematics, because every author has a different style, a different set of preferred topics, a different way of teaching. We do not want to force any one style or set of axioms on the user. How Lurch Sites solve that problem The link above, which goes to the \"plain vanilla\" version of the app, should not be considered the definitive copy of the app; rather, there is no definitive copy. We allow anyone with a GitHub account to fork that repository and, in that fork, configure the app to their own preferences. They can also upload whatever mathematical documents they've authored into that new repository. Then if they enable web access to that repository, they will have a copy of Lurch running that behaves the way they want and includes the mathematics that they want. We call such a repository a Lurch Site. We maintain on this website a gallery of Lurch Sites , so that new users don't need to create their own Lurch Site, but might find that someone has already built what they need. If you create a Lurch Site, let us know so that we can include it in the gallery! Just create a new issue for this website repository and say that you want to add your Lurch Site to the gallery, providing the URL.","title":"What is a Lurch Site?"},{"location":"what-is-a-lurch-site/#what-is-a-lurch-site","text":"","title":"What is a Lurch Site?"},{"location":"what-is-a-lurch-site/#the-problem-lurch-sites-solve","text":"While it's true that anyone can try Lurch online right now , that copy of the app is the \"plain vanilla\" version, which means: it has the default configuration (just one of many possible ways to configure the app), and it does not include any example mathematical definitions, axioms, or theorems, so you can do only very tiny and uninteresting proofs. We cannot solve this problem just by adding to that app a lot of documents that define interesting mathematics, because every author has a different style, a different set of preferred topics, a different way of teaching. We do not want to force any one style or set of axioms on the user.","title":"The problem Lurch Sites solve"},{"location":"what-is-a-lurch-site/#how-lurch-sites-solve-that-problem","text":"The link above, which goes to the \"plain vanilla\" version of the app, should not be considered the definitive copy of the app; rather, there is no definitive copy. We allow anyone with a GitHub account to fork that repository and, in that fork, configure the app to their own preferences. They can also upload whatever mathematical documents they've authored into that new repository. Then if they enable web access to that repository, they will have a copy of Lurch running that behaves the way they want and includes the mathematics that they want. We call such a repository a Lurch Site. We maintain on this website a gallery of Lurch Sites , so that new users don't need to create their own Lurch Site, but might find that someone has already built what they need. If you create a Lurch Site, let us know so that we can include it in the gallery! Just create a new issue for this website repository and say that you want to add your Lurch Site to the gallery, providing the URL.","title":"How Lurch Sites solve that problem"}]}