
// This is a helper module for the build.js script in this same folder.
// See the comments in that file for more information.

import { writeFile, rm, readFile, readdir } from 'node:fs/promises'
import { join } from 'node:path'
import { promisify } from 'node:util'
import { exec } from 'node:child_process'
const execAsync = promisify( exec )

/*
 * Take an array of JavaScript code strings as input and run them in a file in
 * the given folder.  The filename used will be a temporary filename created
 * using the UID given.  Returns a promise that resolves to an array of strings,
 * each one representing the combined stdout and stderr of the corresponding
 * code snippet given as the first parameter.
 */
const runSnippets = async ( snippets, folder, uniqueId ) => {
    const fileToRun = join( folder, `run-snippets-${uniqueId}.mjs` )
    const separator = '---------OUTPUT DIVIDER---------'
    const codeToRun = snippets.join( `\nconsole.log( '${separator}' )\n` )
    await writeFile( fileToRun, codeToRun )
	const { stdout, stderr } = await execAsync(
		`node "${fileToRun}"`, { cwd : folder } )
	await rm( fileToRun )
	return ( stdout + stderr ).split( separator )
}

/*
 * Find one JS code snippet from among the n>=0 snippets in the given Markdown
 * text.  Return it, or undefined if the (zero-based) index given is >=n.  The
 * result is a `[start,end]` pair that represents the interior of the code
 * snippet (excluding the opening and closing lines of tick marks).
 */
const startMarker = '\n```js\n'
const endMarker = '\n```\n'
const getSnippetPosition = ( markdownString, index ) => {
    let start = markdownString.indexOf( startMarker )
    while ( start > -1 && index-- > 0 )
        start = markdownString.indexOf( startMarker, start + 1 )
    if ( start == -1 ) return undefined
    start += startMarker.length
    const end = markdownString.indexOf( endMarker, start )
    if ( end == -1 ) return undefined
    return [ start, end ]
}

/*
 * Replace one JS code snippet in a piece of Markdown text with the given
 * replacement text.  Return the new string, or if the index is invalid, it
 * returns undefined.
 */
const replaceSnippet = ( markdownString, index, replacement ) => {
    const position = getSnippetPosition( markdownString, index )
    if ( !position ) return undefined
    return markdownString.substring( 0, position[0] - startMarker.length )
         + replacement
         + markdownString.substring( position[1] + endMarker.length )
}

/*
 * Extract all JS code snippets from a piece of Markdown text into an array of
 * strings.  This is done by calling `getSnippetPosition()` with higher and
 * higher indices until it returns undefined, indicating that we have reached
 * the first invalid index.  The array of strings is returned.
 */
const extractSnippets = markdownString => {
    const snippets = [ ]
    let index = 0
    let position = getSnippetPosition( markdownString, index )
    while ( position ) {
        snippets.push( markdownString.substring( position[0], position[1] ) )
        position = getSnippetPosition( markdownString, ++index )
    }
    return snippets
}

/*
 * Take any Markdown file as input (by providing its absolute path) and
 * (a) extract all of its code snippets using the `extractSnippets()` function
 * above, (b) run them all with the PWD set to the given folder using the
 * `runSnippets()` function above, and (c) place after each code snippet the
 * output generated by that code snippet, as a Markdown "text" block (delimited
 * by triple backticks).  Return a Promise that resolves to the resulting
 * string.
 */
const runTutorial = async ( tutorial, pwd ) => {
    let content = String( await readFile( tutorial ) )
    const snippets = extractSnippets( content )
    if ( snippets.length == 0 ) return content
	const filename = tutorial.split( '/' ).pop()
    const results = await runSnippets( snippets, pwd, filename )
    results.forEach( ( output, index ) => {
        let replacement = `\`\`\`js\n${snippets[index]}\n\`\`\`\n`
        if ( !/^\s*$/.test( output ) )
            replacement += `\n\n\`\`\`text\n// Console output:\n`
					     + `${output.trim()}\n\`\`\`\n\n`
            content = replaceSnippet( content, index,
                `\n<br/>\n<hr/>\n\n${replacement}\n\n<hr/>\n<br/>\n` )
    } )
	return content
}

/*
 * Run all the tutorial files in a given folder, by applying the above
 * `runTutorial()` function to each.  The `pwd` argument is passed to each case.
 */
export const runTutorials = async ( inputFolder, pwd ) =>
	readdir( inputFolder ).then( files =>
		Promise.all( files.filter(
			file => file.endsWith( '.md' )
    	).map( async file => {
        	const tutorial = join( inputFolder, file )
        	return runTutorial( tutorial, pwd ).then(
				newContent => writeFile( tutorial, newContent ) )
    	} ) ) )
